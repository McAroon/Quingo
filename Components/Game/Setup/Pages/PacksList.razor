@page "/game/setup/packs"

@using Microsoft.AspNetCore.Authorization
@using System.Security.Claims

@inject ApplicationDbContext Db

@attribute [Authorize]

<PageTitle>Packs</PageTitle>

<h1>Packs</h1>

@if (Packs == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="mb-3 w-75">
             <MudTooltip Text="Test tooltip">
                <MudButton Href="game/setup/pack" StartIcon="@Icons.Material.Filled.Add">New Pack</MudButton>
            </MudTooltip>
        </div>
    </div>
    <div class="row">
        @foreach (var pack in Packs.Where(x => x.DeletedAt == null))
        {
            <div class="col-sm-12 col-md-6 col-lg-3 mb-2">
                <div class="card">
                    @if (!string.IsNullOrEmpty(pack.ImageUrl))
                    {
                        <img src="@pack.ImageUrl" class="card-img-top" alt="Logo">
                    }
                    <div class="card-body">
                        <h5 class="card-title">@pack.Name</h5>
                        @if (pack.Description != null)
                        {
                            <p class="card-text">@pack.Description</p>
                        }

                        @if (pack.CreatedByUserId == UserId)
                        {
                            <MudButton Href="@($"game/setup/pack/{pack.Id}")" Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Edit">Edit</MudButton>
                            <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Delete" Color="Color.Error" Clicked="() => DeletePack(pack.Id)">Delete</MudButton>
                        }
                    </div>
                </div>
            </div>
        }
    </div>
}

@code {
    string abc = "abc";
    [CascadingParameter]
    private Task<AuthenticationState>? AuthenticationState { get; set; }

    public List<Pack>? Packs { get; set; }

    public string? UserId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Packs = await Db.Packs.ToListAsync();
        if (AuthenticationState != null)
        {
            UserId = (await AuthenticationState)?.User?.FindFirstValue(ClaimTypes.NameIdentifier);
        }
    }

    private async Task DeletePack(int packId)
    {
        var pack = await Db.Packs.FirstOrDefaultAsync(x => x.Id == packId);
        if (pack == null)
        {
            throw new Exception("Pack not found");
        }
        Db.Remove(pack);
        await Db.SaveChangesAsync();
        StateHasChanged();
    }
}
