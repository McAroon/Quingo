// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Quingo.Infrastructure.Database;

#nullable disable

namespace Quingo.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250911184300_AddLobbyBanWithNavigation")]
    partial class AddLobbyBanWithNavigation
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("LobbyParticipant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedByUserId")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedByUserId")
                        .HasColumnType("text");

                    b.Property<bool>("IsReady")
                        .HasColumnType("boolean");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<int>("TournamentLobbyId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedByUserId")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("DeletedAt");

                    b.HasIndex("DeletedByUserId");

                    b.HasIndex("TournamentLobbyId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("LobbyParticipants");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.DataProtection.EntityFrameworkCore.DataProtectionKey", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("FriendlyName")
                        .HasColumnType("text");

                    b.Property<string>("Xml")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("DataProtectionKeys");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Quingo.Shared.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Quingo.Shared.Entities.IndirectLink", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedByUserId")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedByUserId")
                        .HasColumnType("text");

                    b.Property<string>("Direction")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("PackId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedByUserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("DeletedAt");

                    b.HasIndex("DeletedByUserId");

                    b.HasIndex("PackId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("IndirectLinks");
                });

            modelBuilder.Entity("Quingo.Shared.Entities.IndirectLinkStep", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedByUserId")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedByUserId")
                        .HasColumnType("text");

                    b.Property<int>("IndirectLinkId")
                        .HasColumnType("integer");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<int>("TagFromId")
                        .HasColumnType("integer");

                    b.Property<int>("TagToId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedByUserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("DeletedAt");

                    b.HasIndex("DeletedByUserId");

                    b.HasIndex("IndirectLinkId");

                    b.HasIndex("TagFromId");

                    b.HasIndex("TagToId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("IndirectLinkSteps");
                });

            modelBuilder.Entity("Quingo.Shared.Entities.LobbyBan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedByUserId")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedByUserId")
                        .HasColumnType("text");

                    b.Property<int>("TournamentLobbyId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedByUserId")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("DeletedAt");

                    b.HasIndex("DeletedByUserId");

                    b.HasIndex("UpdatedByUserId");

                    b.HasIndex("TournamentLobbyId", "UserId")
                        .IsUnique();

                    b.ToTable("LobbyBans");
                });

            modelBuilder.Entity("Quingo.Shared.Entities.Node", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CellScore")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedByUserId")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedByUserId")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("Difficulty")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("PackId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedByUserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("DeletedAt");

                    b.HasIndex("DeletedByUserId");

                    b.HasIndex("Difficulty");

                    b.HasIndex("ImageUrl");

                    b.HasIndex("Name");

                    b.HasIndex("PackId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("Nodes");
                });

            modelBuilder.Entity("Quingo.Shared.Entities.NodeLink", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedByUserId")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedByUserId")
                        .HasColumnType("text");

                    b.Property<int>("NodeFromId")
                        .HasColumnType("integer");

                    b.Property<int>("NodeLinkTypeId")
                        .HasColumnType("integer");

                    b.Property<int>("NodeToId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedByUserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("DeletedAt");

                    b.HasIndex("DeletedByUserId");

                    b.HasIndex("NodeFromId");

                    b.HasIndex("NodeLinkTypeId");

                    b.HasIndex("NodeToId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("NodeLinks");
                });

            modelBuilder.Entity("Quingo.Shared.Entities.NodeLinkType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedByUserId")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedByUserId")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("PackId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedByUserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("DeletedAt");

                    b.HasIndex("DeletedByUserId");

                    b.HasIndex("PackId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("NodeLinkTypes");
                });

            modelBuilder.Entity("Quingo.Shared.Entities.NodeTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedByUserId")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedByUserId")
                        .HasColumnType("text");

                    b.Property<int>("NodeId")
                        .HasColumnType("integer");

                    b.Property<int>("TagId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedByUserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("DeletedAt");

                    b.HasIndex("DeletedByUserId");

                    b.HasIndex("NodeId");

                    b.HasIndex("TagId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("NodeTags");
                });

            modelBuilder.Entity("Quingo.Shared.Entities.Pack", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedByUserId")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedByUserId")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedByUserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("DeletedAt");

                    b.HasIndex("DeletedByUserId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("Packs");
                });

            modelBuilder.Entity("Quingo.Shared.Entities.PackPreset", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedByUserId")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedByUserId")
                        .HasColumnType("text");

                    b.Property<int>("PackId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedByUserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("DeletedAt");

                    b.HasIndex("DeletedByUserId");

                    b.HasIndex("PackId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("PackPresets");
                });

            modelBuilder.Entity("Quingo.Shared.Entities.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedByUserId")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedByUserId")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("PackId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedByUserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("DeletedAt");

                    b.HasIndex("DeletedByUserId");

                    b.HasIndex("PackId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("Quingo.Shared.Entities.TournamentResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CellScore")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedByUserId")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedByUserId")
                        .HasColumnType("text");

                    b.Property<int>("DrawHistory")
                        .HasColumnType("integer");

                    b.Property<int>("ErrorPenalty")
                        .HasColumnType("integer");

                    b.Property<int>("Game")
                        .HasColumnType("integer");

                    b.Property<Guid>("GameSessionId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsRandom")
                        .HasColumnType("boolean");

                    b.Property<int>("LobbyId")
                        .HasColumnType("integer");

                    b.Property<int>("Position")
                        .HasColumnType("integer");

                    b.Property<int?>("Result")
                        .HasColumnType("integer");

                    b.Property<int>("Score")
                        .HasColumnType("integer");

                    b.Property<int>("TimeBonus")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedByUserId")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("DeletedAt");

                    b.HasIndex("DeletedByUserId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("TournamentResults");
                });

            modelBuilder.Entity("Quingo.Shared.Entities.UserPackPreset", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedByUserId")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedByUserId")
                        .HasColumnType("text");

                    b.Property<int>("PackId")
                        .HasColumnType("integer");

                    b.Property<int>("TournamentMode")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedByUserId")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("DeletedAt");

                    b.HasIndex("DeletedByUserId");

                    b.HasIndex("UpdatedByUserId");

                    b.HasIndex("UserId", "PackId", "TournamentMode")
                        .IsUnique();

                    b.ToTable("UserPackPresets");
                });

            modelBuilder.Entity("TournamentLobby", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedByUserId")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedByUserId")
                        .HasColumnType("text");

                    b.Property<string>("HostUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("HostUserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PackId")
                        .HasColumnType("integer");

                    b.Property<string>("PackName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<int>("TournamentMode")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedByUserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("DeletedAt");

                    b.HasIndex("DeletedByUserId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("TournamentLobbies");
                });

            modelBuilder.Entity("LobbyParticipant", b =>
                {
                    b.HasOne("Quingo.Shared.Entities.ApplicationUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId");

                    b.HasOne("Quingo.Shared.Entities.ApplicationUser", "DeletedByUser")
                        .WithMany()
                        .HasForeignKey("DeletedByUserId");

                    b.HasOne("TournamentLobby", "Lobby")
                        .WithMany("Participants")
                        .HasForeignKey("TournamentLobbyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Quingo.Shared.Entities.ApplicationUser", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserId");

                    b.Navigation("CreatedByUser");

                    b.Navigation("DeletedByUser");

                    b.Navigation("Lobby");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Quingo.Shared.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Quingo.Shared.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Quingo.Shared.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Quingo.Shared.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Quingo.Shared.Entities.IndirectLink", b =>
                {
                    b.HasOne("Quingo.Shared.Entities.ApplicationUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId");

                    b.HasOne("Quingo.Shared.Entities.ApplicationUser", "DeletedByUser")
                        .WithMany()
                        .HasForeignKey("DeletedByUserId");

                    b.HasOne("Quingo.Shared.Entities.Pack", "Pack")
                        .WithMany("IndirectLinks")
                        .HasForeignKey("PackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Quingo.Shared.Entities.ApplicationUser", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserId");

                    b.Navigation("CreatedByUser");

                    b.Navigation("DeletedByUser");

                    b.Navigation("Pack");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("Quingo.Shared.Entities.IndirectLinkStep", b =>
                {
                    b.HasOne("Quingo.Shared.Entities.ApplicationUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId");

                    b.HasOne("Quingo.Shared.Entities.ApplicationUser", "DeletedByUser")
                        .WithMany()
                        .HasForeignKey("DeletedByUserId");

                    b.HasOne("Quingo.Shared.Entities.IndirectLink", "IndirectLink")
                        .WithMany("Steps")
                        .HasForeignKey("IndirectLinkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Quingo.Shared.Entities.Tag", "TagFrom")
                        .WithMany("IndirectLinksFrom")
                        .HasForeignKey("TagFromId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Quingo.Shared.Entities.Tag", "TagTo")
                        .WithMany("IndirectLinksTo")
                        .HasForeignKey("TagToId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Quingo.Shared.Entities.ApplicationUser", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserId");

                    b.Navigation("CreatedByUser");

                    b.Navigation("DeletedByUser");

                    b.Navigation("IndirectLink");

                    b.Navigation("TagFrom");

                    b.Navigation("TagTo");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("Quingo.Shared.Entities.LobbyBan", b =>
                {
                    b.HasOne("Quingo.Shared.Entities.ApplicationUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId");

                    b.HasOne("Quingo.Shared.Entities.ApplicationUser", "DeletedByUser")
                        .WithMany()
                        .HasForeignKey("DeletedByUserId");

                    b.HasOne("TournamentLobby", "Lobby")
                        .WithMany("Bans")
                        .HasForeignKey("TournamentLobbyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Quingo.Shared.Entities.ApplicationUser", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserId");

                    b.Navigation("CreatedByUser");

                    b.Navigation("DeletedByUser");

                    b.Navigation("Lobby");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("Quingo.Shared.Entities.Node", b =>
                {
                    b.HasOne("Quingo.Shared.Entities.ApplicationUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId");

                    b.HasOne("Quingo.Shared.Entities.ApplicationUser", "DeletedByUser")
                        .WithMany()
                        .HasForeignKey("DeletedByUserId");

                    b.HasOne("Quingo.Shared.Entities.Pack", "Pack")
                        .WithMany("Nodes")
                        .HasForeignKey("PackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Quingo.Shared.Entities.ApplicationUser", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserId");

                    b.OwnsOne("Quingo.Shared.Entities.Meta", "Meta", b1 =>
                        {
                            b1.Property<int>("NodeId")
                                .HasColumnType("integer");

                            b1.HasKey("NodeId");

                            b1.ToTable("Nodes");

                            b1.ToJson("Meta");

                            b1.WithOwner()
                                .HasForeignKey("NodeId");

                            b1.OwnsMany("Quingo.Shared.Entities.Meta+MetaProperty", "Properties", b2 =>
                                {
                                    b2.Property<int>("MetaNodeId")
                                        .HasColumnType("integer");

                                    b2.Property<int>("__synthesizedOrdinal")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("integer");

                                    b2.Property<string>("Key")
                                        .IsRequired()
                                        .HasColumnType("text");

                                    b2.Property<string>("Value")
                                        .IsRequired()
                                        .HasColumnType("text");

                                    b2.HasKey("MetaNodeId", "__synthesizedOrdinal");

                                    b2.ToTable("Nodes");

                                    b2.WithOwner()
                                        .HasForeignKey("MetaNodeId");
                                });

                            b1.Navigation("Properties");
                        });

                    b.Navigation("CreatedByUser");

                    b.Navigation("DeletedByUser");

                    b.Navigation("Meta")
                        .IsRequired();

                    b.Navigation("Pack");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("Quingo.Shared.Entities.NodeLink", b =>
                {
                    b.HasOne("Quingo.Shared.Entities.ApplicationUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId");

                    b.HasOne("Quingo.Shared.Entities.ApplicationUser", "DeletedByUser")
                        .WithMany()
                        .HasForeignKey("DeletedByUserId");

                    b.HasOne("Quingo.Shared.Entities.Node", "NodeFrom")
                        .WithMany("NodeLinksFrom")
                        .HasForeignKey("NodeFromId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Quingo.Shared.Entities.NodeLinkType", "NodeLinkType")
                        .WithMany("NodeLinks")
                        .HasForeignKey("NodeLinkTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Quingo.Shared.Entities.Node", "NodeTo")
                        .WithMany("NodeLinksTo")
                        .HasForeignKey("NodeToId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Quingo.Shared.Entities.ApplicationUser", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserId");

                    b.OwnsOne("Quingo.Shared.Entities.Meta", "Meta", b1 =>
                        {
                            b1.Property<int>("NodeLinkId")
                                .HasColumnType("integer");

                            b1.HasKey("NodeLinkId");

                            b1.ToTable("NodeLinks");

                            b1.ToJson("Meta");

                            b1.WithOwner()
                                .HasForeignKey("NodeLinkId");

                            b1.OwnsMany("Quingo.Shared.Entities.Meta+MetaProperty", "Properties", b2 =>
                                {
                                    b2.Property<int>("MetaNodeLinkId")
                                        .HasColumnType("integer");

                                    b2.Property<int>("__synthesizedOrdinal")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("integer");

                                    b2.Property<string>("Key")
                                        .IsRequired()
                                        .HasColumnType("text");

                                    b2.Property<string>("Value")
                                        .IsRequired()
                                        .HasColumnType("text");

                                    b2.HasKey("MetaNodeLinkId", "__synthesizedOrdinal");

                                    b2.ToTable("NodeLinks");

                                    b2.WithOwner()
                                        .HasForeignKey("MetaNodeLinkId");
                                });

                            b1.Navigation("Properties");
                        });

                    b.Navigation("CreatedByUser");

                    b.Navigation("DeletedByUser");

                    b.Navigation("Meta")
                        .IsRequired();

                    b.Navigation("NodeFrom");

                    b.Navigation("NodeLinkType");

                    b.Navigation("NodeTo");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("Quingo.Shared.Entities.NodeLinkType", b =>
                {
                    b.HasOne("Quingo.Shared.Entities.ApplicationUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId");

                    b.HasOne("Quingo.Shared.Entities.ApplicationUser", "DeletedByUser")
                        .WithMany()
                        .HasForeignKey("DeletedByUserId");

                    b.HasOne("Quingo.Shared.Entities.Pack", "Pack")
                        .WithMany("NodeLinkTypes")
                        .HasForeignKey("PackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Quingo.Shared.Entities.ApplicationUser", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserId");

                    b.Navigation("CreatedByUser");

                    b.Navigation("DeletedByUser");

                    b.Navigation("Pack");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("Quingo.Shared.Entities.NodeTag", b =>
                {
                    b.HasOne("Quingo.Shared.Entities.ApplicationUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId");

                    b.HasOne("Quingo.Shared.Entities.ApplicationUser", "DeletedByUser")
                        .WithMany()
                        .HasForeignKey("DeletedByUserId");

                    b.HasOne("Quingo.Shared.Entities.Node", "Node")
                        .WithMany("NodeTags")
                        .HasForeignKey("NodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Quingo.Shared.Entities.Tag", "Tag")
                        .WithMany("NodeTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Quingo.Shared.Entities.ApplicationUser", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserId");

                    b.Navigation("CreatedByUser");

                    b.Navigation("DeletedByUser");

                    b.Navigation("Node");

                    b.Navigation("Tag");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("Quingo.Shared.Entities.Pack", b =>
                {
                    b.HasOne("Quingo.Shared.Entities.ApplicationUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId");

                    b.HasOne("Quingo.Shared.Entities.ApplicationUser", "DeletedByUser")
                        .WithMany()
                        .HasForeignKey("DeletedByUserId");

                    b.HasOne("Quingo.Shared.Entities.ApplicationUser", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserId");

                    b.Navigation("CreatedByUser");

                    b.Navigation("DeletedByUser");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("Quingo.Shared.Entities.PackPreset", b =>
                {
                    b.HasOne("Quingo.Shared.Entities.ApplicationUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId");

                    b.HasOne("Quingo.Shared.Entities.ApplicationUser", "DeletedByUser")
                        .WithMany()
                        .HasForeignKey("DeletedByUserId");

                    b.HasOne("Quingo.Shared.Entities.Pack", "Pack")
                        .WithMany("Presets")
                        .HasForeignKey("PackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Quingo.Shared.Entities.ApplicationUser", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserId");

                    b.OwnsOne("Quingo.Shared.Entities.PackPresetData", "Data", b1 =>
                        {
                            b1.Property<int>("PackPresetId")
                                .HasColumnType("integer");

                            b1.Property<int>("AutoDrawTimer")
                                .HasColumnType("integer");

                            b1.Property<int>("CardSize")
                                .HasColumnType("integer");

                            b1.Property<bool>("EnableCall")
                                .HasColumnType("boolean");

                            b1.Property<int>("EndgameTimer")
                                .HasColumnType("integer");

                            b1.Property<bool>("FreeCenter")
                                .HasColumnType("boolean");

                            b1.Property<int>("GameTimer")
                                .HasColumnType("integer");

                            b1.Property<bool>("JoinOnCreate")
                                .HasColumnType("boolean");

                            b1.Property<int>("LivesNumber")
                                .HasColumnType("integer");

                            b1.Property<int>("MatchRule")
                                .HasColumnType("integer");

                            b1.Property<int?>("MaxDifficulty")
                                .HasColumnType("integer");

                            b1.Property<int>("MaxPlayers")
                                .HasColumnType("integer");

                            b1.Property<int?>("MinDifficulty")
                                .HasColumnType("integer");

                            b1.Property<int>("Pattern")
                                .HasColumnType("integer");

                            b1.Property<bool>("SamePlayerCards")
                                .HasColumnType("boolean");

                            b1.Property<int>("ScoringRules")
                                .HasColumnType("integer");

                            b1.Property<bool>("SeparateDrawPerPlayer")
                                .HasColumnType("boolean");

                            b1.Property<bool>("ShowTagBadges")
                                .HasColumnType("boolean");

                            b1.Property<bool>("SingleColumnConfig")
                                .HasColumnType("boolean");

                            b1.HasKey("PackPresetId");

                            b1.ToTable("PackPresets");

                            b1.ToJson("Data");

                            b1.WithOwner()
                                .HasForeignKey("PackPresetId");

                            b1.OwnsMany("Quingo.Shared.Entities.PackPresetColumn", "Columns", b2 =>
                                {
                                    b2.Property<int>("PackPresetDataPackPresetId")
                                        .HasColumnType("integer");

                                    b2.Property<int>("__synthesizedOrdinal")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("integer");

                                    b2.PrimitiveCollection<int[]>("ExcludeTags")
                                        .IsRequired()
                                        .HasColumnType("integer[]");

                                    b2.Property<string>("Name")
                                        .IsRequired()
                                        .HasColumnType("text");

                                    b2.PrimitiveCollection<int[]>("QuestionTags")
                                        .IsRequired()
                                        .HasColumnType("integer[]");

                                    b2.HasKey("PackPresetDataPackPresetId", "__synthesizedOrdinal");

                                    b2.ToTable("PackPresets");

                                    b2.WithOwner()
                                        .HasForeignKey("PackPresetDataPackPresetId");

                                    b2.OwnsMany("Quingo.Shared.Entities.PackPresetTag", "ColAnswerTags", b3 =>
                                        {
                                            b3.Property<int>("PackPresetColumnPackPresetDataPackPresetId")
                                                .HasColumnType("integer");

                                            b3.Property<int>("PackPresetColumn__synthesizedOrdinal")
                                                .HasColumnType("integer");

                                            b3.Property<int>("__synthesizedOrdinal")
                                                .ValueGeneratedOnAdd()
                                                .HasColumnType("integer");

                                            b3.Property<int?>("ItemsMax")
                                                .HasColumnType("integer");

                                            b3.Property<int?>("ItemsMin")
                                                .HasColumnType("integer");

                                            b3.Property<int>("TagId")
                                                .HasColumnType("integer");

                                            b3.HasKey("PackPresetColumnPackPresetDataPackPresetId", "PackPresetColumn__synthesizedOrdinal", "__synthesizedOrdinal");

                                            b3.ToTable("PackPresets");

                                            b3.WithOwner()
                                                .HasForeignKey("PackPresetColumnPackPresetDataPackPresetId", "PackPresetColumn__synthesizedOrdinal");
                                        });

                                    b2.Navigation("ColAnswerTags");
                                });

                            b1.Navigation("Columns");
                        });

                    b.Navigation("CreatedByUser");

                    b.Navigation("Data")
                        .IsRequired();

                    b.Navigation("DeletedByUser");

                    b.Navigation("Pack");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("Quingo.Shared.Entities.Tag", b =>
                {
                    b.HasOne("Quingo.Shared.Entities.ApplicationUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId");

                    b.HasOne("Quingo.Shared.Entities.ApplicationUser", "DeletedByUser")
                        .WithMany()
                        .HasForeignKey("DeletedByUserId");

                    b.HasOne("Quingo.Shared.Entities.Pack", "Pack")
                        .WithMany("Tags")
                        .HasForeignKey("PackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Quingo.Shared.Entities.ApplicationUser", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserId");

                    b.Navigation("CreatedByUser");

                    b.Navigation("DeletedByUser");

                    b.Navigation("Pack");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("Quingo.Shared.Entities.TournamentResult", b =>
                {
                    b.HasOne("Quingo.Shared.Entities.ApplicationUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId");

                    b.HasOne("Quingo.Shared.Entities.ApplicationUser", "DeletedByUser")
                        .WithMany()
                        .HasForeignKey("DeletedByUserId");

                    b.HasOne("Quingo.Shared.Entities.ApplicationUser", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserId");

                    b.Navigation("CreatedByUser");

                    b.Navigation("DeletedByUser");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("Quingo.Shared.Entities.UserPackPreset", b =>
                {
                    b.HasOne("Quingo.Shared.Entities.ApplicationUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId");

                    b.HasOne("Quingo.Shared.Entities.ApplicationUser", "DeletedByUser")
                        .WithMany()
                        .HasForeignKey("DeletedByUserId");

                    b.HasOne("Quingo.Shared.Entities.ApplicationUser", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserId");

                    b.OwnsOne("Quingo.Shared.Entities.PackPresetData", "Data", b1 =>
                        {
                            b1.Property<int>("UserPackPresetId")
                                .HasColumnType("integer");

                            b1.Property<int>("AutoDrawTimer")
                                .HasColumnType("integer");

                            b1.Property<int>("CardSize")
                                .HasColumnType("integer");

                            b1.Property<bool>("EnableCall")
                                .HasColumnType("boolean");

                            b1.Property<int>("EndgameTimer")
                                .HasColumnType("integer");

                            b1.Property<bool>("FreeCenter")
                                .HasColumnType("boolean");

                            b1.Property<int>("GameTimer")
                                .HasColumnType("integer");

                            b1.Property<bool>("JoinOnCreate")
                                .HasColumnType("boolean");

                            b1.Property<int>("LivesNumber")
                                .HasColumnType("integer");

                            b1.Property<int>("MatchRule")
                                .HasColumnType("integer");

                            b1.Property<int?>("MaxDifficulty")
                                .HasColumnType("integer");

                            b1.Property<int>("MaxPlayers")
                                .HasColumnType("integer");

                            b1.Property<int?>("MinDifficulty")
                                .HasColumnType("integer");

                            b1.Property<int>("Pattern")
                                .HasColumnType("integer");

                            b1.Property<bool>("SamePlayerCards")
                                .HasColumnType("boolean");

                            b1.Property<int>("ScoringRules")
                                .HasColumnType("integer");

                            b1.Property<bool>("SeparateDrawPerPlayer")
                                .HasColumnType("boolean");

                            b1.Property<bool>("ShowTagBadges")
                                .HasColumnType("boolean");

                            b1.Property<bool>("SingleColumnConfig")
                                .HasColumnType("boolean");

                            b1.HasKey("UserPackPresetId");

                            b1.ToTable("UserPackPresets");

                            b1.ToJson("Data");

                            b1.WithOwner()
                                .HasForeignKey("UserPackPresetId");

                            b1.OwnsMany("Quingo.Shared.Entities.PackPresetColumn", "Columns", b2 =>
                                {
                                    b2.Property<int>("PackPresetDataUserPackPresetId")
                                        .HasColumnType("integer");

                                    b2.Property<int>("__synthesizedOrdinal")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("integer");

                                    b2.PrimitiveCollection<int[]>("ExcludeTags")
                                        .IsRequired()
                                        .HasColumnType("integer[]");

                                    b2.Property<string>("Name")
                                        .IsRequired()
                                        .HasColumnType("text");

                                    b2.PrimitiveCollection<int[]>("QuestionTags")
                                        .IsRequired()
                                        .HasColumnType("integer[]");

                                    b2.HasKey("PackPresetDataUserPackPresetId", "__synthesizedOrdinal");

                                    b2.ToTable("UserPackPresets");

                                    b2.WithOwner()
                                        .HasForeignKey("PackPresetDataUserPackPresetId");

                                    b2.OwnsMany("Quingo.Shared.Entities.PackPresetTag", "ColAnswerTags", b3 =>
                                        {
                                            b3.Property<int>("PackPresetColumnPackPresetDataUserPackPresetId")
                                                .HasColumnType("integer");

                                            b3.Property<int>("PackPresetColumn__synthesizedOrdinal")
                                                .HasColumnType("integer");

                                            b3.Property<int>("__synthesizedOrdinal")
                                                .ValueGeneratedOnAdd()
                                                .HasColumnType("integer");

                                            b3.Property<int?>("ItemsMax")
                                                .HasColumnType("integer");

                                            b3.Property<int?>("ItemsMin")
                                                .HasColumnType("integer");

                                            b3.Property<int>("TagId")
                                                .HasColumnType("integer");

                                            b3.HasKey("PackPresetColumnPackPresetDataUserPackPresetId", "PackPresetColumn__synthesizedOrdinal", "__synthesizedOrdinal");

                                            b3.ToTable("UserPackPresets");

                                            b3.WithOwner()
                                                .HasForeignKey("PackPresetColumnPackPresetDataUserPackPresetId", "PackPresetColumn__synthesizedOrdinal");
                                        });

                                    b2.Navigation("ColAnswerTags");
                                });

                            b1.Navigation("Columns");
                        });

                    b.Navigation("CreatedByUser");

                    b.Navigation("Data")
                        .IsRequired();

                    b.Navigation("DeletedByUser");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("TournamentLobby", b =>
                {
                    b.HasOne("Quingo.Shared.Entities.ApplicationUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId");

                    b.HasOne("Quingo.Shared.Entities.ApplicationUser", "DeletedByUser")
                        .WithMany()
                        .HasForeignKey("DeletedByUserId");

                    b.HasOne("Quingo.Shared.Entities.ApplicationUser", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserId");

                    b.OwnsOne("Quingo.Shared.Entities.PackPresetData", "PresetData", b1 =>
                        {
                            b1.Property<int>("TournamentLobbyId")
                                .HasColumnType("integer");

                            b1.Property<int>("AutoDrawTimer")
                                .HasColumnType("integer");

                            b1.Property<int>("CardSize")
                                .HasColumnType("integer");

                            b1.Property<bool>("EnableCall")
                                .HasColumnType("boolean");

                            b1.Property<int>("EndgameTimer")
                                .HasColumnType("integer");

                            b1.Property<bool>("FreeCenter")
                                .HasColumnType("boolean");

                            b1.Property<int>("GameTimer")
                                .HasColumnType("integer");

                            b1.Property<bool>("JoinOnCreate")
                                .HasColumnType("boolean");

                            b1.Property<int>("LivesNumber")
                                .HasColumnType("integer");

                            b1.Property<int>("MatchRule")
                                .HasColumnType("integer");

                            b1.Property<int?>("MaxDifficulty")
                                .HasColumnType("integer");

                            b1.Property<int>("MaxPlayers")
                                .HasColumnType("integer");

                            b1.Property<int?>("MinDifficulty")
                                .HasColumnType("integer");

                            b1.Property<int>("Pattern")
                                .HasColumnType("integer");

                            b1.Property<bool>("SamePlayerCards")
                                .HasColumnType("boolean");

                            b1.Property<int>("ScoringRules")
                                .HasColumnType("integer");

                            b1.Property<bool>("SeparateDrawPerPlayer")
                                .HasColumnType("boolean");

                            b1.Property<bool>("ShowTagBadges")
                                .HasColumnType("boolean");

                            b1.Property<bool>("SingleColumnConfig")
                                .HasColumnType("boolean");

                            b1.HasKey("TournamentLobbyId");

                            b1.ToTable("TournamentLobbies");

                            b1.ToJson("PresetData");

                            b1.WithOwner()
                                .HasForeignKey("TournamentLobbyId");

                            b1.OwnsMany("Quingo.Shared.Entities.PackPresetColumn", "Columns", b2 =>
                                {
                                    b2.Property<int>("PackPresetDataTournamentLobbyId")
                                        .HasColumnType("integer");

                                    b2.Property<int>("__synthesizedOrdinal")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("integer");

                                    b2.PrimitiveCollection<int[]>("ExcludeTags")
                                        .IsRequired()
                                        .HasColumnType("integer[]");

                                    b2.Property<string>("Name")
                                        .IsRequired()
                                        .HasColumnType("text");

                                    b2.PrimitiveCollection<int[]>("QuestionTags")
                                        .IsRequired()
                                        .HasColumnType("integer[]");

                                    b2.HasKey("PackPresetDataTournamentLobbyId", "__synthesizedOrdinal");

                                    b2.ToTable("TournamentLobbies");

                                    b2.WithOwner()
                                        .HasForeignKey("PackPresetDataTournamentLobbyId");

                                    b2.OwnsMany("Quingo.Shared.Entities.PackPresetTag", "ColAnswerTags", b3 =>
                                        {
                                            b3.Property<int>("PackPresetColumnPackPresetDataTournamentLobbyId")
                                                .HasColumnType("integer");

                                            b3.Property<int>("PackPresetColumn__synthesizedOrdinal")
                                                .HasColumnType("integer");

                                            b3.Property<int>("__synthesizedOrdinal")
                                                .ValueGeneratedOnAdd()
                                                .HasColumnType("integer");

                                            b3.Property<int?>("ItemsMax")
                                                .HasColumnType("integer");

                                            b3.Property<int?>("ItemsMin")
                                                .HasColumnType("integer");

                                            b3.Property<int>("TagId")
                                                .HasColumnType("integer");

                                            b3.HasKey("PackPresetColumnPackPresetDataTournamentLobbyId", "PackPresetColumn__synthesizedOrdinal", "__synthesizedOrdinal");

                                            b3.ToTable("TournamentLobbies");

                                            b3.WithOwner()
                                                .HasForeignKey("PackPresetColumnPackPresetDataTournamentLobbyId", "PackPresetColumn__synthesizedOrdinal");
                                        });

                                    b2.Navigation("ColAnswerTags");
                                });

                            b1.Navigation("Columns");
                        });

                    b.Navigation("CreatedByUser");

                    b.Navigation("DeletedByUser");

                    b.Navigation("PresetData")
                        .IsRequired();

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("Quingo.Shared.Entities.IndirectLink", b =>
                {
                    b.Navigation("Steps");
                });

            modelBuilder.Entity("Quingo.Shared.Entities.Node", b =>
                {
                    b.Navigation("NodeLinksFrom");

                    b.Navigation("NodeLinksTo");

                    b.Navigation("NodeTags");
                });

            modelBuilder.Entity("Quingo.Shared.Entities.NodeLinkType", b =>
                {
                    b.Navigation("NodeLinks");
                });

            modelBuilder.Entity("Quingo.Shared.Entities.Pack", b =>
                {
                    b.Navigation("IndirectLinks");

                    b.Navigation("NodeLinkTypes");

                    b.Navigation("Nodes");

                    b.Navigation("Presets");

                    b.Navigation("Tags");
                });

            modelBuilder.Entity("Quingo.Shared.Entities.Tag", b =>
                {
                    b.Navigation("IndirectLinksFrom");

                    b.Navigation("IndirectLinksTo");

                    b.Navigation("NodeTags");
                });

            modelBuilder.Entity("TournamentLobby", b =>
                {
                    b.Navigation("Bans");

                    b.Navigation("Participants");
                });
#pragma warning restore 612, 618
        }
    }
}
