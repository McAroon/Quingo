@page "/Account/LoginGuest"

@using System.ComponentModel.DataAnnotations

@inject IdentityRedirectManager RedirectManager
@inject GuestSignInManager GuestSignInManager

<PageTitle>Guest Log in</PageTitle>

<MudText Typo="Typo.h3" GutterBottom="true">Guest Log in</MudText>

<MudGrid>
    <MudItem md="6">
        <StatusMessage Message="@errorMessage"/>
        <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
            <DataAnnotationsValidator/>

            <MudText GutterBottom="true" Typo="Typo.body1">Use a local account to log in.</MudText>

            <MudGrid>
                <MudItem md="12">
                    <MudStaticTextField For="@(() => Input.Username)" @bind-Value="Input.Username"
                                        Label="Username" Placeholder="username"
                                        UserAttributes="@(new() { { "autocomplete", "true" }, { "aria-required", "true" } })"/>
                </MudItem>
                <MudItem md="12">
                    <MudStaticButton Variant="Variant.Filled" Color="Color.Primary" FullWidth="true"
                                     FormAction="FormAction.Submit">Log in
                    </MudStaticButton>
                </MudItem>
            </MudGrid>
        </EditForm>
    </MudItem>
</MudGrid>

@code {
    private string? errorMessage;

    [CascadingParameter] private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm] private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery] private string? ReturnUrl { get; set; }

    public async Task LoginUser()
    {
        await GuestSignInManager.GuestSignInAsync(Input.Username);
        RedirectManager.RedirectTo(ReturnUrl);
    }

    private sealed class InputModel
    {
        [Required]
        [Display(Name = "Username")]
        public string Username { get; set; } = "";
    }

}