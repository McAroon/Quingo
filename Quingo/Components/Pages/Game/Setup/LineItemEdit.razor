@if (isEdit)
{
    <div class="row">
        <div class="col-9">
            <MudTextField  @bind-Value="@value" />
        </div>
        <div class="col-3">
            <MudTooltip Text="Save">
                <MudIconButton Clicked="Save" Icon="@Icons.Material.Filled.Save"></MudIconButton>
            </MudTooltip>
            <MudTooltip Text="Cancel">
                <MudIconButton Clicked="() => isEdit = false" Icon="@Icons.Material.Filled.Cancel"></MudIconButton>
            </MudTooltip>
            
        </div>
    </div>
}
else
{
    <div class="row">
        <div class="col-9">@Value</div>
        <div class="col-3">
            <MudTooltip Text="Edit">
                <MudIconButton Clicked="() => isEdit = true" Icon="@Icons.Material.Filled.Edit"></MudIconButton>
            </MudTooltip>
            <MudTooltip Text="Delete">
                <MudIconButton Clicked="Delete" Icon="@Icons.Material.Filled.Delete"></MudIconButton>
            </MudTooltip>
        </div>
    </div>
}


@code {
    [Parameter]
    public int Id { get; set; }

    [Parameter]
    public string? Value { get; set; }

    [Parameter]
    public Func<int, string, Task>? OnSave { get; set; }

    [Parameter]
    public Func<int, Task>? OnDelete { get; set; }

    private string value = "";

    private bool isEdit;

    protected override void OnInitialized()
    {
        value = Value ?? "";
    }

    private async Task Save()
    {
        if (OnSave != null)
        {
            await OnSave.Invoke(Id, value);
            isEdit = false;
        }
    }

    private async Task Delete()
    {
        if (OnDelete != null)
            await OnDelete.Invoke(Id);
    }
}
