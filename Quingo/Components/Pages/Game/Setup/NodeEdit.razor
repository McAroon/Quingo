<MudCard>
    @if (IsEditMode)
    {
        <MudCardContent>
            <MudText Typo="Typo.h6">Item info</MudText>
            <MudTextField Label="Name" Required @bind-Value="@Model.Name" />
            <MudTextField Label="Image Url" @bind-Value="@Model.ImageUrl" />
            <MudSelect T="int" MultiSelection Label="Tags" @bind-SelectedValues="@Model.TagIds" MultiSelectionTextFunc="GetTagsSelectText">
                @foreach (var tag in Node.Pack.Tags)
                {
                    <MudSelectItem T="int" Value="@tag.Id">@tag.Name</MudSelectItem>
                }
            </MudSelect>


            <MudText Typo="Typo.h6">Item Links <MudTooltip Text="Add Link"><MudIconButton OnClick="AddLink" Icon="@Icons.Material.Filled.Add"></MudIconButton></MudTooltip></MudText>
            @foreach (var link in Model.NodeLinks)
            {
                <MudPaper Class="pa-4 mb-2">
                    <MudGrid>
                        <MudItem xs="12">
                            <MudSelect T="NodeLinkDirection" Label="Link Direction" @bind-Value="@link.LinkDirection">
                                <MudSelectItem Value="NodeLinkDirection.From"><MudIcon Size="Size.Small" Icon="@Icons.Material.Filled.ChevronRight" Style="vertical-align: text-bottom" /> From</MudSelectItem>
                                <MudSelectItem Value="NodeLinkDirection.To"><MudIcon Size="Size.Small" Icon="@Icons.Material.Filled.ChevronLeft" Style="vertical-align: text-bottom" /> To</MudSelectItem>
                                <MudSelectItem Value="NodeLinkDirection.Both"><MudIcon Size="Size.Small" Icon="@Icons.Material.Filled.Code" Style="vertical-align: text-bottom" /> Both</MudSelectItem>
                            </MudSelect>
                            <MudAutocomplete T="NodeInfoModel" Label="Link Item" @bind-Value="@link.LinkedNode" SearchFunc="SearchNode" ToStringFunc="x => x?.Name" ResetValueOnEmptyText Clearable Required />
                            <MudSelect T="int?" Label="Link Type" @bind-Value="@link.LinkTypeId" Required>
                                @foreach (var linkType in Node.Pack.NodeLinkTypes)
                                {
                                    <MudSelectItem T="int?" Value="@linkType.Id">@linkType.Name</MudSelectItem>
                                }
                            </MudSelect>
                        </MudItem>
                        <MudItem xs="12" Class="d-flex">
                            <div class="ml-auto">
                                <MudTooltip Text="Remove Link">
                                    <MudIconButton Icon="@Icons.Material.Filled.Delete" OnClick="() => DeleteLink(link)" />
                                </MudTooltip>
                            </div>
                        </MudItem>
                    </MudGrid>
                </MudPaper>
            }
        </MudCardContent>
        <MudCardActions>
            <div class="ml-auto">
                <MudButton Color="Color.Primary" OnClick="Save" StartIcon="@Icons.Material.Filled.Save">Save</MudButton>
                <MudButton Color="Color.Secondary" OnClick="CancelEdit" StartIcon="@Icons.Material.Filled.Cancel">Cancel</MudButton>
            </div>
        </MudCardActions>
    }
    else
    {
        <MudCardHeader>
            <CardHeaderContent>
                <MudText Typo="Typo.h5">
                    @Model.Name
                </MudText>
            </CardHeaderContent>
            <CardHeaderActions>
                <MudTooltip Text="Edit Item">
                    <MudIconButton OnClick="() => IsEditMode = true" Icon="@Icons.Material.Filled.Edit"></MudIconButton>
                </MudTooltip>
                <MudTooltip Text="Delete Item">
                    <MudIconButton OnClick="Delete" Icon="@Icons.Material.Filled.Delete"></MudIconButton>
                </MudTooltip>
            </CardHeaderActions>
        </MudCardHeader>
        <MudCardContent>
            <MudGrid>
                <MudItem xs="12">
                    <MudText Typo="Typo.h6">Tags</MudText>
                    @foreach (var tag in GetTagNames(Model.TagIds))
                    {
                        <MudChip T="string" Variant="Variant.Text">@tag</MudChip>
                    }
                </MudItem>
                <MudItem xs="12">
                    <MudText Typo="Typo.h6">Linked Items</MudText>
                    @foreach (var link in Model.NodeLinks)
                    {
                        <MudGrid>
                            <MudItem>@link.LinkDirection</MudItem>
                            <MudItem>@link.LinkedNode?.Name</MudItem>
                            <MudItem>@GetLinkTypeName(link.LinkTypeId)</MudItem>
                        </MudGrid>
                    }
                </MudItem>
            </MudGrid>
        </MudCardContent>
    }
</MudCard>

@code {
    [Parameter]
    public Node Node { get; set; } = default!;

    [Parameter]
    public Func<int, NodeModel, Task>? OnSave { get; set; }

    [Parameter]
    public Func<int, Task>? OnDelete { get; set; }

    private NodeModel Model { get; set; } = default!;

    private bool IsEditMode { get; set; }

    private IEnumerable<Node> LinkableNodes => Node.Pack.Nodes.Where(
        x => x.DeletedAt == null && x != Node && !Model.NodeLinks.Select(y => y.LinkedNodeId).Contains(x.Id));

    protected override void OnParametersSet()
    {
        RemapModel();
    }

    private void RemapModel()
    {
        Model = MapModel();
        StateHasChanged();
    }

    private NodeModel MapModel()
    {
        var fromIds = Node.NodeLinksFrom.Where(x => x.DeletedAt == null).Select(x => (id: x.NodeToId, name:x.NodeTo.Name, linkId: x.NodeLinkTypeId)).ToList();
        var toIds = Node.NodeLinksTo.Where(x => x.DeletedAt == null).Select(x => (id: x.NodeFromId, name: x.NodeFrom.Name, linkId: x.NodeLinkTypeId)).ToList();
        var bothIds = fromIds.Join(toIds, x => x.id, y => y.id, (x, y) => x).ToList();
        var linksFrom = fromIds.Except(bothIds).Select(x => new NodeLinkModel
            {
                LinkedNode = new NodeInfoModel { Id = x.id, Name = x.name! },
                LinkTypeId = x.linkId,
                LinkDirection = NodeLinkDirection.From
            });
        var linksTo = toIds.Except(bothIds).Select(x => new NodeLinkModel
            {
                LinkedNode = new NodeInfoModel { Id = x.id, Name = x.name! },
                LinkTypeId = x.linkId,
                LinkDirection = NodeLinkDirection.To
            });
        var linksBoth = bothIds.Select(x => new NodeLinkModel
            {
                LinkedNode = new NodeInfoModel { Id = x.id, Name = x.name! },
                LinkTypeId = x.linkId,
                LinkDirection = NodeLinkDirection.Both
            });
        return new NodeModel
            {
                Name = Node.Name,
                ImageUrl = Node.ImageUrl,
                TagIds = Node.NodeTags.Where(x => x.DeletedAt == null).Select(x => x.TagId).ToList(),
                NodeLinks = [..linksFrom, ..linksTo, ..linksBoth],
            };
    }

    private void AddLink()
    {
        Model.NodeLinks.Add(new NodeLinkModel());
    }

    private void DeleteLink(NodeLinkModel linkModel)
    {
        Model.NodeLinks.Remove(linkModel);
    }

    private async Task Save()
    {
        if (OnSave != null)
        {
            Model.TagIds ??= [];
            Model.NodeLinks ??= [];
            await OnSave.Invoke(Node.Id, Model);
            IsEditMode = false;
            RemapModel();
        }
    }

    private async Task Delete()
    {
        if (OnDelete != null)
            await OnDelete.Invoke(Node.Id);
    }

    private void CancelEdit()
    {
        IsEditMode = false;
        RemapModel();
    }

    private Task<IEnumerable<NodeInfoModel>> SearchNode(string value, CancellationToken token)
    {
        var nodes = string.IsNullOrEmpty(value) ? LinkableNodes : LinkableNodes.Where(x => x.Name!.Contains(value, StringComparison.InvariantCultureIgnoreCase));
        var result = nodes.Select(x => new NodeInfoModel { Id = x.Id, Name = x.Name! });
        return Task.FromResult(result);
    }

    private string GetTagsSelectText(List<string> selected)
    {
        var selectedInts = selected.Select(int.Parse).ToList();
        var tags = Node.Pack.Tags.Where(x => selectedInts.Contains(x.Id)).Select(x => x.Name);
        return string.Join(", ", tags);
    }

    private IEnumerable<string> GetTagNames(IEnumerable<int> tagIds)
    {
        var tagIdList = tagIds.ToList(); 
        return Node.Pack.Tags.Where(x => tagIdList.Contains(x.Id)).Select(x => x.Name!);
    }

    private string? GetLinkTypeName(int? id)
    {
        return Node.Pack.NodeLinkTypes.FirstOrDefault(x => x.Id == id)?.Name;
    }
}
