@page "/game/setup/pack"
@page "/game/setup/pack/{PackId:int}"

@using Microsoft.AspNetCore.Authorization
@using System.Security.Claims
@using System.ComponentModel.DataAnnotations

@inject ApplicationDbContext Db
@inject NavigationManager NavigationManager

@attribute [Authorize]

<PageTitle>Pack</PageTitle>

<h1>@(IsCreate ? "Create" : "Edit") Pack</h1>

<h4 class="mb-3">
    Pack Info @if (!IsEditMode)
    {
        <MudTooltip Text="Edit Pack info">
            <MudIconButton Icon="@Icons.Material.Filled.Edit" Clicked="() => IsEditMode = true"></MudIconButton>
        </MudTooltip>
    }
</h4>

@if (Pack == null && !IsCreate)
{
    <p><em>Loading...</em></p>
}
else if (IsEditMode)
{
    <div class="row">
        <div class="col-md-4">
            <EditForm Model="Input" method="post" OnValidSubmit="SavePack" FormName="save">
                <DataAnnotationsValidator />
                <Microsoft.AspNetCore.Components.Forms.ValidationSummary class="text-danger" role="alert" />
                <div class="form-floating mb-3">
                    <InputText @bind-Value="Input.Name" class="form-control" aria-required="true" />
                    <label for="name">Pack Name</label>
                    <ValidationMessage For="() => Input.Name" class="text-danger" />
                </div>
                <div class="form-floating mb-3">
                    <InputText @bind-Value="Input.Description" class="form-control" />
                    <label for="name">Description</label>
                    <ValidationMessage For="() => Input.Description" class="text-danger" />
                </div>
                <div class="form-floating mb-3">
                    <InputText @bind-Value="Input.ImageUrl" class="form-control" />
                    <label for="name">Image Url</label>
                    <ValidationMessage For="() => Input.ImageUrl" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Save</button>
                <button class="btn btn-outline-secondary" @onclick="() => IsEditMode = false">Cancel</button>
            </EditForm>
        </div>
    </div>
}
else
{
    <div class="row">
        <div class="col-md-6 col-lg-4 col-sm-12">
            <dl class="row">
                <dt class="col-lg-3 col-sm-12">Pack Name</dt>
                <dd class="col-lg-9 col-sm-12">@Pack?.Name</dd>

                <dt class="col-lg-3 col-sm-12">Description</dt>
                <dd class="col-lg-9 col-sm-12">@(Pack?.Description ?? "-")</dd>

                <dt class="col-lg-3 col-sm-12">Image Url</dt>
                <dd class="col-lg-9 col-sm-12">@(Pack?.ImageUrl ?? "-")</dd>
            </dl>
        </div>
    </div>
}


@if (Pack != null && !IsCreate)
{
    <CascadingValue Value="Pack">
        <TagsEdit />
        <NodeLinksEdit />
        <NodesEdit />
    </CascadingValue>
}

@code {
    [CascadingParameter]
    private Task<AuthenticationState>? AuthenticationState { get; set; }

    [Parameter]
    public int? PackId { get; set; }

    public Pack? Pack { get; set; }

    public string? UserId { get; set; }

    [SupplyParameterFromForm]
    private PackModel Input { get; set; } = new();

    private bool IsCreate => PackId == null;

    public bool IsEditMode { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (PackId != null)
        {
            Pack = await Db.Packs
            .Include(x => x.Tags)
            .Include(x => x.NodeLinkTypes)
            .Include(x => x.Nodes).ThenInclude(x => x.NodeTags)
            .Include(x => x.Nodes).ThenInclude(x => x.NodeLinksFrom)
            .Include(x => x.Nodes).ThenInclude(x => x.NodeLinksTo)
            .FirstOrDefaultAsync(x => x.Id == PackId);
        }
        
        if (AuthenticationState != null)
        {
            UserId = (await AuthenticationState)?.User?.FindFirstValue(ClaimTypes.NameIdentifier);
        }

        if (PackId != null && (Pack == null || UserId != Pack.CreatedByUserId))
        {
            NavigationManager.NavigateTo("game/setup/pack");
        }

        Input.Name ??= Pack?.Name ?? "";
        Input.Description ??= Pack?.Description ?? "";
        Input.ImageUrl ??= Pack?.ImageUrl ?? "";

        IsEditMode = IsCreate;
    }

    public async Task SavePack(EditContext editContext)
    {
        Pack ??= new Pack();
        Pack.Name = Input.Name;
        Pack.Description = Input.Description;
        Pack.ImageUrl = Input.ImageUrl;

        Db.Update(Pack);
        await Db.SaveChangesAsync();

        IsEditMode = false;

        if (IsCreate)
        {
            NavigationManager.NavigateTo($"game/setup/pack/{Pack.Id}");
        }
    }


}
