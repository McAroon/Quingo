@page "/game/setup/packs"

@using Microsoft.AspNetCore.Authorization
@using System.Security.Claims

@inject ApplicationDbContext Db
@inject FileStoreService Files

@attribute [Authorize]

<PageTitle>Packs</PageTitle>

<MudText Typo="Typo.h3" GutterBottom="true">Packs</MudText>

@if (Packs == null)
{
    <MudText><em>Loading...</em></MudText>
}
else
{
    <MudGrid Class="mb-4">
        <MudItem>
            <MudButton Href="game/setup/pack" StartIcon="@Icons.Material.Filled.Add">New Pack</MudButton>
        </MudItem>
    </MudGrid>
    <MudGrid>
        @foreach (var pack in Packs.Where(x => x.DeletedAt == null).OrderBy(x => x.CreatedAt))
        {
            <MudItem xs="12" md="6" lg="3">
                <MudCard>
                    @if (!string.IsNullOrEmpty(pack.ImageUrl))
                    {
                        <MudCardMedia Image="@Files.GetFileUrl(pack.ImageUrl)" />
                    }
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h5">@pack.Name</MudText>
                        </CardHeaderContent>
                        <CardHeaderActions>
                            @if (pack.CreatedByUserId == UserId)
                            {
                                <MudTooltip Text="Edit Pack">
                                    <MudIconButton Href="@($"game/setup/pack/{pack.Id}")" Icon="@Icons.Material.Filled.Edit"></MudIconButton>
                                </MudTooltip>
                                <MudTooltip Text="Delete Pack">
                                    <MudIconButton Icon="@Icons.Material.Filled.Delete" OnClick="() => DeletePack(pack.Id)"></MudIconButton>
                                </MudTooltip>
                            }
                        </CardHeaderActions>
                    </MudCardHeader>
                    <MudCardContent Style="min-height:60px">
                        <MudText>@pack.Description</MudText>
                    </MudCardContent>
                </MudCard>
            </MudItem>
        }
    </MudGrid>
}

@code {
    [CascadingParameter]
    private Task<AuthenticationState>? AuthenticationState { get; set; }

    public List<Pack>? Packs { get; set; }

    public string? UserId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Packs = await Db.Packs.ToListAsync();
        if (AuthenticationState != null)
        {
            UserId = (await AuthenticationState)?.User?.FindFirstValue(ClaimTypes.NameIdentifier);
        }
    }

    private async Task DeletePack(int packId)
    {
        var pack = await Db.Packs.FirstOrDefaultAsync(x => x.Id == packId);
        if (pack == null)
        {
            throw new Exception("Pack not found");
        }
        Db.Remove(pack);
        await Db.SaveChangesAsync();
        StateHasChanged();
    }
}
