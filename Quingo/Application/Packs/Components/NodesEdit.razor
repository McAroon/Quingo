@inject ApplicationDbContext Db
@inject FileStoreService Files
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<MudText Typo="Typo.h4" GutterBottom>
    Pack Items <MudTooltip Text="Add Item"><MudIconButton OnClick="AddNode" Icon="@Icons.Material.Filled.Add"></MudIconButton></MudTooltip>
</MudText>

<MudGrid>
    @if (Pack?.Nodes != null)
    @foreach(var node in Pack.Nodes.Where(x => x.DeletedAt == null))
    {
        <MudItem xs="12" md="6" lg="4">
            <NodeEdit Node="node" OnSave="SaveNode" OnDelete="ConfirmDeleteNode" />
        </MudItem>
        <MudFlexBreak />
    }
</MudGrid>

@code {
    [CascadingParameter]
    public Pack Pack { get; set; } = default!;

    private async Task AddNode()
    {
        await SaveNode(0, new NodeModel());
    }

    private async Task SaveNode(int id, NodeModel model)
    {
        if (id == 0)
        {
            var node = new Node
            {
                Name = model.Name ?? "New Item",
                Pack = Pack
            };
            Db.Update(node);
        }
        else
        {
            var node = Pack.Nodes.FirstOrDefault(x => x.Id == id);
            if (node == null)
            {
                Snackbar.Add("Item not found", Severity.Error);
                return;
            }

            node.Name = model.Name;

            foreach (var tagId in model.TagIds)
            {
                var nodeTag = node.NodeTags.FirstOrDefault(x => x.TagId == tagId);
                if (nodeTag == null)
                {
                    var tag = Pack.Tags.FirstOrDefault(x => x.Id == tagId);
                    if (tag == null)
                    {
                        Snackbar.Add("Tag not found", Severity.Error);
                        return;
                    }

                    nodeTag = new NodeTag
                    {
                        Node = node,
                        Tag = tag
                    };
                    node.NodeTags.Add(nodeTag);
                }
                else if (nodeTag.DeletedAt != null)
                {
                    nodeTag.DeletedAt = null;
                    nodeTag.DeletedByUserId = null;
                }
            }

            foreach (var nodeTag in node.NodeTags.Where(x => !model.TagIds.Contains(x.Tag.Id)))
            {
                Db.Remove(nodeTag);
            }

            foreach (var linkModel in model.NodeLinks)
            {
                if (linkModel.LinkDirection is NodeLinkDirection.From or NodeLinkDirection.Both)
                {
                    var link = node.NodeLinksFrom.FirstOrDefault(x => x.NodeToId == linkModel.LinkedNodeId);
                    var linkType = Pack.NodeLinkTypes.FirstOrDefault(x => x.Id == linkModel.LinkTypeId);
                    if (linkType == null)
                    {
                        Snackbar.Add("Link Type not found", Severity.Error);
                        return;
                    }

                    var linkedNode = Pack.Nodes.FirstOrDefault(x => x.Id == linkModel.LinkedNodeId);
                    if (linkedNode == null)
                    {
                        Snackbar.Add("Linked Item not found", Severity.Error);
                        return;
                    }

                    if (link == null)
                    {
                        link = new NodeLink
                        {
                            NodeFrom = node,
                            NodeTo = linkedNode,
                            NodeLinkType = linkType
                        };
                        node.NodeLinksFrom.Add(link);
                    }
                    else
                    {
                        if (link.NodeLinkTypeId != linkModel.LinkTypeId)
                        {
                            link.NodeLinkType = linkType;
                        }
                        if (link.DeletedAt != null)
                        {
                            link.DeletedAt = null;
                            link.DeletedByUserId = null;
                        }
                    }
                }

                if (linkModel.LinkDirection is NodeLinkDirection.To or NodeLinkDirection.Both)
                {
                    var link = node.NodeLinksTo.FirstOrDefault(x => x.NodeFromId == linkModel.LinkedNodeId);
                    var linkType = Pack.NodeLinkTypes.FirstOrDefault(x => x.Id == linkModel.LinkTypeId);
                    if (linkType == null)
                    {
                        Snackbar.Add("Link Type not found", Severity.Error);
                        return;
                    }

                    var linkedNode = Pack.Nodes.FirstOrDefault(x => x.Id == linkModel.LinkedNodeId);
                    if (linkedNode == null)
                    {
                        Snackbar.Add("Linked Item not found", Severity.Error);
                        return;
                    }

                    if (link == null)
                    {
                        link = new NodeLink
                            {
                                NodeFrom = linkedNode,
                                NodeTo = node,
                                NodeLinkType = linkType
                            };
                        node.NodeLinksTo.Add(link);
                    }
                    else
                    {
                        if (link.NodeLinkTypeId != linkModel.LinkTypeId)
                        {
                            link.NodeLinkType = linkType;
                        }
                        if (link.DeletedAt != null)
                        {
                            link.DeletedAt = null;
                            link.DeletedByUserId = null;
                        }
                    }
                }
            }

            foreach (var nodeLink in node.NodeLinksFrom)
            {
                var linkModel = model.NodeLinks.FirstOrDefault(x => x.LinkedNodeId == nodeLink.NodeTo.Id);
                if (linkModel == null)
                {
                    Db.Remove(nodeLink);
                }
            }

            foreach (var nodeLink in node.NodeLinksTo)
            {
                var linkModel = model.NodeLinks.FirstOrDefault(x => x.LinkedNodeId == nodeLink.NodeFrom.Id);
                if (linkModel == null)
                {
                    Db.Remove(nodeLink);
                }
            }

            if (model.ImageFile != null)
            {
                await Files.UploadBrowserFile(model.ImageFile);
                node.ImageUrl = model.ImageFile.Name;
            }
        }

        await Db.SaveChangesAsync();
        StateHasChanged();
    }

    private async Task ConfirmDeleteNode(int id)
    {
        var node = Pack.Nodes.FirstOrDefault(x => x.Id == id);
        if (node == null)
        {
            Snackbar.Add("Item not found", Severity.Error);
            return;
        }

        var parameters = new ConfirmDialog.ConfirmDialogParams
            {
                Prompt = $"Delete item {node.Name}?",
                ButtonText = "Delete",
                ButtonColor = Color.Error
            };
        var confirmed = await ConfirmDialog.CallDialog(DialogService, parameters);

        if (confirmed)
        {
            await DeleteNode(node);
        }
    }

    private async Task DeleteNode(Node node)
    {
        Db.Remove(node);
        await Db.SaveChangesAsync();
        StateHasChanged();
    }
}
