<MudDialog>
    <DialogContent>
        <MudCard>
            <MudCardContent>
                <MudForm @ref="@_form">
                    <MudText Typo="Typo.h6">Item info</MudText>
                    <MudTextField Label="Name" @bind-Value="@_model.Name" Required/>
                    <MudSelect T="int" MultiSelection Label="Tags" @bind-SelectedValues="@_model.TagIds"
                               MultiSelectionTextFunc="GetTagsSelectText">
                        @foreach (var tag in Node.Pack.Tags)
                        {
                            <MudSelectItem T="int" Value="@tag.Id">@tag.Name</MudSelectItem>
                        }
                    </MudSelect>
                    <MudTextField Label="Description" @bind-Value="_model.Description" AutoGrow/>
                    <MudNumericField T="int?" Min="1" Label="Cell Score" @bind-Value="_model.CellScore"/>
                    <MudNumericField Label="Difficulty" Min="1" @bind-Value="_model.Difficulty"/>
                    <ImageUpload @ref="_uploadRef"/>

                    <MudText Typo="Typo.h6">
                        Item Links
                        <MudTooltip Text="Add Link">
                            <MudIconButton OnClick="AddLink" Icon="@Icons.Material.Filled.Add"></MudIconButton>
                        </MudTooltip>
                    </MudText>
                    @foreach (var link in _model.NodeLinks)
                    {
                        <MudPaper Class="pa-4 mb-2">
                            <MudGrid>
                                <MudItem xs="12">
                                    <MudSelect T="NodeLinkDirection" Label="Link Direction"
                                               @bind-Value="@link.LinkDirection"
                                               @bind-Value:after="() => OnLinkChange(link)">
                                        <MudSelectItem Value="NodeLinkDirection.To">
                                            <MudIcon Size="Size.Small" Icon="@NodeLinkDirection.To.MudIcon()"
                                                     Class="icon-inline-select"/>
                                            To
                                        </MudSelectItem>
                                        <MudSelectItem Value="NodeLinkDirection.From">
                                            <MudIcon Size="Size.Small" Icon="@NodeLinkDirection.From.MudIcon()"
                                                     Class="icon-inline-select"/>
                                            From
                                        </MudSelectItem>
                                        <MudSelectItem Value="NodeLinkDirection.Both">
                                            <MudIcon Size="Size.Small" Icon="@NodeLinkDirection.Both.MudIcon()"
                                                     Class="icon-inline-select"/>
                                            Both
                                        </MudSelectItem>
                                    </MudSelect>
                                    <MudAutocomplete T="LinkedNodeInfoModel" Label="Link Item"
                                                     @bind-Value="@link.LinkedNode"
                                                     @bind-Value:after="() => OnLinkChange(link)"
                                                     SearchFunc="SearchNode" ToStringFunc="x => x?.Name ?? string.Empty"
                                                     ResetValueOnEmptyText Clearable Required/>
                                    <MudSelect T="int?" Label="Link Type" @bind-Value="@link.LinkTypeId"
                                               @bind-Value:after="() => OnLinkChange(link)" Required>
                                        @foreach (var linkType in Node.Pack.NodeLinkTypes)
                                        {
                                            <MudSelectItem T="int?" Value="@linkType.Id">@linkType.Name</MudSelectItem>
                                        }
                                    </MudSelect>
                                </MudItem>
                                <MudItem xs="12" Class="d-flex">
                                    <div class="ml-auto">
                                        <MudTooltip Text="Remove Link">
                                            <MudIconButton Icon="@Icons.Material.Filled.Delete"
                                                           OnClick="() => DeleteLink(link)"/>
                                        </MudTooltip>
                                    </div>
                                </MudItem>
                            </MudGrid>
                        </MudPaper>
                    }
                </MudForm>
            </MudCardContent>
            <MudCardActions>
                <div class="ml-auto">
                    <MudButton Color="Color.Primary" OnClick="Save" StartIcon="@Icons.Material.Filled.Save">Save
                    </MudButton>
                    <MudButton Color="Color.Secondary" OnClick="CancelEdit" StartIcon="@Icons.Material.Filled.Cancel">
                        Cancel
                    </MudButton>
                </div>
            </MudCardActions>
        </MudCard>
    </DialogContent>
</MudDialog>


@code {
    [CascadingParameter] private MudDialogInstance MudDialog { get; set; } = default!;

    [Parameter] public Node Node { get; set; } = default!;

    [Parameter, EditorRequired] public List<LinkedNodeInfoModel> NodeInfos { get; set; } = default!;

    [Parameter] public Func<int, NodeModel, Task>? OnSave { get; set; }

    [Parameter] public Func<Task>? OnCancel { get; set; }

    private NodeModel _model = default!;

    private MudForm _form = default!;

    private ImageUpload? _uploadRef;

    private IEnumerable<LinkedNodeInfoModel> LinkableNodes => NodeInfos.Where(
        x => x.Id != Node.Id && !_model.NodeLinks.Select(y => y.LinkedNodeId).Contains(x.Id));

    protected override void OnParametersSet()
    {
        RemapModel();
    }

    private void RemapModel()
    {
        _model = new NodeModel(Node);
        StateHasChanged();
    }

    private void AddLink()
    {
        var link = new NodeLinkModel();
        _model.NodeLinks.Add(link);
        OnLinkChange(link);
    }

    private void DeleteLink(NodeLinkModel linkModel)
    {
        if (_model.NodeLinks.Contains(linkModel))
            _model.NodeLinks.Remove(linkModel);

        if (_model.NodeLinksChanged.Contains(linkModel))
            _model.NodeLinksChanged.Remove(linkModel);

        if (!_model.NodeLinksRemoved.Contains(linkModel))
            _model.NodeLinksRemoved.Add(linkModel);
    }

    private void OnLinkChange(NodeLinkModel linkModel)
    {
        if (!_model.NodeLinksChanged.Contains(linkModel))
            _model.NodeLinksChanged.Add(linkModel);
    }

    private async Task Save()
    {
        await _form.Validate();
        if (_form.IsValid && OnSave != null)
        {
            _model.TagIds ??= [];
            _model.NodeLinks ??= [];
            _model.ImageFile = _uploadRef?.File;
            await OnSave.Invoke(Node.Id, _model);
            MudDialog.Close(DialogResult.Ok(true));
        }
    }

    private async Task CancelEdit()
    {
        if (OnCancel != null)
        {
            await OnCancel.Invoke();
        }

        MudDialog.Cancel();
    }

    private Task<IEnumerable<LinkedNodeInfoModel>> SearchNode(string value, CancellationToken token)
    {
        var nodes = string.IsNullOrEmpty(value)
            ? LinkableNodes
            : LinkableNodes.Where(x => x.Name?.Contains(value, StringComparison.InvariantCultureIgnoreCase) == true);
        return Task.FromResult(nodes);
    }

    private string GetTagsSelectText(List<string> selected)
    {
        var selectedInts = selected.Select(int.Parse).ToList();
        var tags = Node.Pack.Tags.Where(x => selectedInts.Contains(x.Id)).Select(x => x.Name);
        return string.Join(", ", tags);
    }

    public static async Task<IDialogReference> ShowNodeEditDialog(IDialogService dialog, Node node,
        List<LinkedNodeInfoModel> nodeInfos,
        Func<int, NodeModel, Task>? onSave = null, Func<Task>? onCancel = null)
    {
        var parameters = new DialogParameters<NodeEditDialog>
        {
            { x => x.Node, node },
            { x => x.NodeInfos, nodeInfos },
            { x => x.OnSave, onSave },
            { x => x.OnCancel, onCancel }
        };

        var opts = new DialogOptions
        {
            CloseButton = true,
            CloseOnEscapeKey = false,
            BackdropClick = false,
            MaxWidth = MaxWidth.Medium,
            FullWidth = true
        };

        return await dialog.ShowAsync<NodeEditDialog>("Edit Item", parameters, opts);
    }

}