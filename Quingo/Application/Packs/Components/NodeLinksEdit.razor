@inject ApplicationDbContext Db
@inject ISnackbar Snackbar

<MudText Typo="Typo.h4" GutterBottom>
    Link Types <MudTooltip Text="Add Link Type"><MudIconButton OnClick="AddLinkType" Icon="@Icons.Material.Filled.Add"></MudIconButton></MudTooltip>
</MudText>

<MudGrid>
    <MudItem xs="12" md="6" lg="4">
        @if (Pack?.NodeLinkTypes != null)
            @foreach (var link in Pack.NodeLinkTypes.Where(x => x.DeletedAt == null))
            {
                <LineItemEdit Id="@link.Id" Value="@link.Name" OnSave="SaveLinkType" OnDelete="DeleteLinkType" />
            }
    </MudItem>
</MudGrid>

@code {
    [CascadingParameter]
    public Pack Pack { get; set; } = default!;

    private async Task SaveLinkType(int id, string value)
    {
        if (id == 0)
        {
            var link = new NodeLinkType
                {
                    Name = value,
                    Pack = Pack
                };
            Db.Update(link);
        }
        else
        {
            var link = Pack.NodeLinkTypes.FirstOrDefault(x => x.Id == id);
            if (link == null)
            {
                Snackbar.Add("Link Type not found", Severity.Error);
                return;
            }

            link.Name = value;
            Db.Update(link);
        }
        await Db.SaveChangesAsync();
        StateHasChanged();
    }

    private async Task DeleteLinkType(int id)
    {
        var link = Pack.NodeLinkTypes.FirstOrDefault(x => x.Id == id);
        if (link == null)
        {
            Snackbar.Add("Link Type not found", Severity.Error);
            return;
        }

        if (link.NodeLinks.Any(x => x.DeletedAt == null))
        {
            Snackbar.Add("Link Type is in use", Severity.Error);
            return;
        }

        Db.Remove(link);
        await Db.SaveChangesAsync();
        StateHasChanged();
    }

    private async Task AddLinkType()
    {
        await SaveLinkType(0, "New Link Type");
    }
}
