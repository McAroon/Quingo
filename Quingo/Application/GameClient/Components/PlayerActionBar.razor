@using System.Security.Claims
@inherits ActionBarBase

<MudStack AlignItems="AlignItems.End" Spacing="0" Class="pb-2">
    <MudButton Color="Color.Secondary" StartIcon="@Icons.Material.Filled.ExitToApp" Href="/">Leave Game</MudButton>
    @if (ShowHostControls && State.GameState.State == GameStateEnum.Active)
    {
        <MudButton Color="Color.Secondary" StartIcon="@Icons.Material.Filled.Stop"
                   Disabled="State.GameState.State != GameStateEnum.Active" OnClick="ConfirmEndGame">End Game
        </MudButton>
    }
</MudStack>
<MudStack Justify="Justify.Center" Row>
    @if (State.GameState.Preset.EnableCall)
    {
        <MudButton Color="Color.Primary" Size="Size.Large" Variant="Variant.Filled"
                   StartIcon="@Icons.Material.Outlined.BackHand" OnClick="Call"
                   Disabled="!AllowCall">Call
        </MudButton>
    }
    @if (ShowHostControls && Game.IsStateActive)
    {
        <MudBreakpointProvider>
            <MudHidden Invert Breakpoint="Breakpoint.MdAndUp">
                <MudButton Color="Color.Primary" Size="Size.Large" Variant="Variant.Filled"
                           StartIcon="@Icons.Material.Outlined.PlayArrow" OnClick="Draw"
                           Disabled="State.GameState.State != GameStateEnum.Active || !State.GameState.CanDraw">Draw
                </MudButton>
            </MudHidden>
            <MudHidden Invert Breakpoint="Breakpoint.SmAndDown">
                <div class="fab-br">
                    <MudFab StartIcon="@Icons.Material.Outlined.PlayArrow" Color="Color.Primary" OnClick="Draw"
                            Disabled="State.GameState.State != GameStateEnum.Active || !State.GameState.CanDraw"/>
                </div>
            </MudHidden>
        </MudBreakpointProvider>
    }
    @if (ShowHostControls && !Game.IsStateActive)
    {
        <MudButton Color="Color.Primary" Size="Size.Large" Variant="Variant.Filled"
                   StartIcon="@Icons.Material.Outlined.Refresh" OnClick="PlayAgain"
                   Disabled="IsLoading">Play Again
        </MudButton>
    }
</MudStack>

@code {
    [CascadingParameter] public PlayerState State { get; set; } = default!;

    [CascadingParameter(Name = "UserId")] public override string UserId { get; set; } = default!;

    [CascadingParameter] private Task<AuthenticationState>? AuthenticationState { get; set; }

    public override GameState Game => State.GameState;

    private bool AllowCall => State.GameState.State is GameStateEnum.Active or GameStateEnum.FinalCountdown
                              && State.GameState.Preset.EnableCall
                              && State.LivesNumber > 0 && !State.GameState.WinningPlayers.Contains(State);

    private bool ShowHostControls => State.PlayerUserId == State.GameState.HostUserId || _user?.IsInRole("admin") == true;

    private ClaimsPrincipal? _user;

    protected override async Task OnInitializedAsync()
    {
        if (AuthenticationState != null)
        {
            _user = (await AuthenticationState)?.User;
        }
    }

    private void Call()
    {
        try
        {
            if (AllowCall)
            {
                State.GameState.Call(State);
            }
        }
        catch (Exception e)
        {
            Logger.LogError(e, e.Message);
            Snackbar.Add(e.Message, Severity.Error);
        }
    }

}
