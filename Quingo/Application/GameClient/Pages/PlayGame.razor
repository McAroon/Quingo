@page "/game/play/{GameSessionId:guid}/{PlayerSessionId:guid}"

@using Microsoft.AspNetCore.Authorization
@using System.Security.Claims

@implements IDisposable

@inject GameStateService StateService
@inject ISnackbar Snackbar
@inject ILogger<PlayGame> Logger
@inject IDialogService Dialog
@inject NavigationManager NavigationManager

@attribute [Authorize]

<PageTitle>Play</PageTitle>

@if (_initError != null)
{
    <MudAlert Severity="Severity.Error">@_initError</MudAlert>
}
else if (_isInitialized)
{
    <CascadingValue Value="_state">
        <PlayerLayout/>
    </CascadingValue>
}

@code {
    [CascadingParameter(Name = "UserId")] private string UserId { get; set; } = default!;

    [Parameter] public Guid GameSessionId { get; set; }

    [Parameter] public Guid PlayerSessionId { get; set; }

    private string? _initError;

    private PlayerState _state = default!;

    private bool _isInitialized;

    protected override void OnInitialized()
    {
        try
        {
            InitializeGame();
            _isInitialized = true;
        }
        catch (Exception e)
        {
            Logger.LogError(e, e.Message);
            _initError = e.Message;
        }
    }

    protected override void OnParametersSet()
    {
        if (_state == null
            || (_state.PlayerSessionId == PlayerSessionId && _state.GameState.GameSessionId == GameSessionId)) return;

        try
        {
            _isInitialized = false;
            InitializeGame();
            _isInitialized = true;
        }
        catch (Exception e)
        {
            Logger.LogError(e, e.Message);
            _initError = e.Message;
        }
    }

    private void InitializeGame()
    {
        _state = StateService.GetPlayerState(GameSessionId, PlayerSessionId, UserId);
        _state.StateChanged += OnStateChanged;
        _state.GameState.StateChanged += OnStateChanged;
        _state.GameState.GameStateChanged += OnGameStateChanged;
        _state.NewGameCreated += OnNewGameCreated;
    }

    private void OnStateChanged()
    {
        InvokeAsync(StateHasChanged);
    }

    private void OnGameStateChanged(GameStateEnum state)
    {
        InvokeAsync(async () =>
        {
            if (state == GameStateEnum.FinalCountdown)
            {
                Snackbar.Add("Countdown!", Severity.Warning);
            }
            else if (state is GameStateEnum.Canceled && _state.GameState.HostUserId != UserId)
            {
                await Dialog.ShowMessageBox("The game has ended", $"{_state.GameState.HostName} has stopped the game. Thanks for playing!");
            }
            else if (state is GameStateEnum.Canceled or GameStateEnum.Finished)
            {
                await Dialog.ShowMessageBox("The game has ended", "Thanks for playing!");
            }
        });
    }

    private void OnNewGameCreated(GameState game, PlayerState player)
    {
        InvokeAsync(() =>
        {
            NavigationManager.NavigateTo($"/game/play/{game.GameSessionId}/{player.PlayerSessionId}");
        });
    }

    public void Dispose()
    {
        if (_state == null) return;
        _state.StateChanged -= OnStateChanged;
        _state.GameState.StateChanged -= OnStateChanged;
        _state.GameState.GameStateChanged -= OnGameStateChanged;
        _state.NewGameCreated -= OnNewGameCreated;
    }

}
