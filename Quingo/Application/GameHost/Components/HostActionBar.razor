@using System.Security.Claims
@inherits ActionBarBase

<MudStack AlignItems="AlignItems.End" Spacing="0" Class="pb-2">
    @if (IsHost && Game.State == GameStateEnum.Active)
    {
        <MudButton Color="Color.Secondary" StartIcon="@Icons.Material.Filled.Stop"
                   Disabled="Game.State != GameStateEnum.Active" OnClick="ConfirmEndGame">End Game
        </MudButton>
    }
    <MudButton Color="Color.Secondary" StartIcon="@Icons.Material.Filled.ExitToApp" Href="/">Leave Game</MudButton>
</MudStack>
<MudStack Justify="Justify.Center" Row>
    <MudButton Color="Color.Primary" Size="Size.Large" Variant="Variant.Filled"
               StartIcon="@Icons.Material.Outlined.PlayCircle" OnClick="Draw"
               Disabled="Game.State != GameStateEnum.Active || !Game.CanDraw">Draw
    </MudButton>
</MudStack>

@code {
    [CascadingParameter] public override GameState Game { get; set; } = default!;

    [CascadingParameter(Name = "UserId")] public override string UserId { get; set; } = default!;

    [CascadingParameter] private Task<AuthenticationState>? AuthenticationState { get; set; }

    private ClaimsPrincipal? _user;
    
    private bool IsHost => Game.HostUserId == UserId || _user?.IsInRole("admin") == true;

    private bool IsSpectator => Game.Spectators.FirstOrDefault(x => x.UserId == UserId) != null;

    protected override async Task OnInitializedAsync()
    {
        if (AuthenticationState != null)
        {
            _user = (await AuthenticationState)?.User;
        }
    }

}
