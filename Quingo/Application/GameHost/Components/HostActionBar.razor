@inject ISnackbar Snackbar
@inject ILogger<HostActionBar> Logger
@inject GameStateService StateService
@inject IDialogService DialogService

<MudGrid Justify="Justify.FlexEnd">
    <MudItem xs="5" Class="d-flex">
        <div class="ml-auto">
            @if (Game.State == GameStateEnum.Active)
            {
                <MudButton Color="Color.Secondary" StartIcon="@Icons.Material.Filled.Stop"
                           Disabled="Game.State != GameStateEnum.Active" OnClick="ConfirmEndGame">End Game</MudButton>
            }
            else
            {
                <MudButton Color="Color.Secondary" StartIcon="@Icons.Material.Filled.ExitToApp" Href="/">Leave Game</MudButton>
            }
        </div>
    </MudItem>
</MudGrid>
<MudGrid Justify="Justify.Center">
    <MudItem md="2" xs="4">
        <MudButton Color="Color.Primary" Size="Size.Large" Variant="Variant.Filled"
                   StartIcon="@Icons.Material.Outlined.PlayCircle" OnClick="Draw"
                   Disabled="Game.State != GameStateEnum.Active || !Game.CanDraw">Draw</MudButton>
    </MudItem>
</MudGrid>

@code {
    [CascadingParameter]
    public GameState Game { get; set; } = default!;

    [CascadingParameter(Name = "UserId")]
    public string UserId { get; set; } = default!;

    private async Task ConfirmEndGame()
    {
        var parameters = new ConfirmDialog.ConfirmDialogParams
            {
                Prompt = $"Do you want to end game?",
                ButtonText = "End game",
                ButtonColor = Color.Error
            };
        var confirmed = await ConfirmDialog.CallDialog(DialogService, parameters);

        if (confirmed)
        {
            EndGame();
        }
    }

    private void EndGame()
    {
        try
        {
            StateService.EndGame(Game.GameSessionId, UserId);
        }
        catch (Exception e)
        {
            Logger.LogError(e, e.Message);
            Snackbar.Add(e.Message, Severity.Error);
        }
    }

    private void Draw()
    {
        try
        {
            Game.Draw();

            // var count = Game.QNodes.Count;
            // for (int i = 0; i < count && Game.CanDraw; i++)
            // {
            //     Game.Draw();
            // }
        }
        catch (Exception e)
        {
            Logger.LogError(e, e.Message);
            Snackbar.Add(e.Message, Severity.Error);
        }
    }
}
