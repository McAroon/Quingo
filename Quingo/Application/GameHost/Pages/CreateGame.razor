@page "/game/host"

@using Microsoft.AspNetCore.Authorization
@using System.Security.Claims

@inject ILogger<CreateGame> Logger
@inject ApplicationDbContext Db
@inject GameStateService StateService
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager

@attribute [Authorize]

<PageTitle>Create Game</PageTitle>

<MudText Typo="Typo.h3" GutterBottom>Create Game</MudText>

<MudGrid>
    <MudItem xs="12" md="4">
        <MudSelect T="int?" Label="Select Pack" @bind-Value="@_selectedPackId" @bind-Value:after="OnPackSelected" Class="pb-4">
            @foreach (var pack in _packs)
            {
                <MudSelectItem T="int?" Value="@pack.Id">@pack.Name</MudSelectItem>
            }
        </MudSelect>
        <MudButton Variant="Variant.Outlined" Color="Color.Primary" StartIcon="@Icons.Material.Filled.PlayArrow" OnClick="StartGame" Disabled="_pack == null">Start Game</MudButton>
    </MudItem>
</MudGrid>

@code {
    [CascadingParameter]
    private Task<AuthenticationState>? AuthenticationState { get; set; }

    private List<Pack> _packs = [];

    private string? _userId;

    private int? _selectedPackId;

    private Pack? _pack;

    protected override async Task OnInitializedAsync()
    {
        _packs = await Db.Packs.ToListAsync();
        if (AuthenticationState != null)
        {
            _userId = (await AuthenticationState).User.FindFirstValue(ClaimTypes.NameIdentifier);
        }
    }

    private async Task OnPackSelected()
    {
        _pack = await Db.PacksWithIncludes.FirstOrDefaultAsync(x => x.Id == _selectedPackId);
        if (_pack == null)
        {
            throw new Exception("Pack not found");
        }
    }

    private async Task StartGame()
    {
        try
        {
            ArgumentNullException.ThrowIfNull(_pack, nameof(_pack));
            ArgumentNullException.ThrowIfNull(_userId, nameof(_userId));

            var game = await StateService.StartGame(_pack.Id, _userId);
            NavigationManager.NavigateTo($"/game/host/{game.GameSessionId}");
        }
        catch (Exception e)
        {
            Logger.LogError(e, e.Message);
            Snackbar.Add(e.Message, Severity.Error);
        }
    }
}
