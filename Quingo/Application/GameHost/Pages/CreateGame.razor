@page "/game/host"

@using Microsoft.AspNetCore.Authorization
@using System.Security.Claims

@inject ILogger<CreateGame> Logger
@inject ApplicationDbContext Db
@inject GameStateService StateService
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager
@inject FileStoreService Files

@attribute [Authorize]

<PageTitle>Create Game</PageTitle>

<MudText Typo="Typo.h3" GutterBottom>Create Game</MudText>
<MudText Typo="Typo.h6" GutterBottom>Select Pack</MudText>

<MudStack Row Spacing="2" Wrap="Wrap.Wrap" Class="pb-2">
    @foreach (var pack in _packs)
    {
        <MudCard Class="pack-card clickable mud-ripple" @onclick="() => SelectPack(pack)" Outlined="pack == _pack">
            @if (!string.IsNullOrEmpty(pack.ImageUrl))
            {
                <MudCardMedia Image="@Files.GetFileUrl(pack.ImageUrl)" />
            }
            else
            {
                <div class="pack-default-image" />
            }
            <MudCardHeader>
                <CardHeaderContent>
                    <MudText Typo="Typo.h5">@pack.Name</MudText>
                </CardHeaderContent>
            </MudCardHeader>
            <MudCardContent>
                <MudText>@pack.Description</MudText>
            </MudCardContent>
        </MudCard>
    }
</MudStack>
@if (_pack != null && _preset != null)
{
    <MudText Typo="Typo.h6" GutterBottom>
        Pack Preset @if (!_isPresetEdit)
        {
            <MudTooltip Text="Edit Preset">
                <MudIconButton Icon="@Icons.Material.Filled.Edit" OnClick="() => _isPresetEdit = true"></MudIconButton>
            </MudTooltip>
        }
    </MudText>
    <MudContainer MaxWidth="MaxWidth.Small" Gutters="false" Class="ml-0 pb-2">
        <PresetEdit Preset="_preset" IsEdit="_isPresetEdit" OnSave="SetPresetData" OnCancelEdit="CancelPresetEdit" />
    </MudContainer>
}

<MudButton Variant="Variant.Outlined" Color="Color.Primary" StartIcon="@Icons.Material.Filled.PlayArrow"
           OnClick="StartGame" Disabled="_pack == null || _isPresetEdit || _isLoading">Start Game</MudButton>

@code {
    [CascadingParameter(Name = "UserId")]
    public string UserId { get; set; } = default!;

    private List<Pack> _packs = [];

    private Pack? _pack;

    private PackPreset? _preset;

    private bool _isPresetEdit;

    private bool _isLoading;

    protected override async Task OnInitializedAsync()
    {
        var exGame = StateService.Games.FirstOrDefault(x => x.HostUserId == UserId && (x.State is not GameStateEnum.Finished and not GameStateEnum.Canceled));
        if (exGame != null)
        {
            NavigationManager.NavigateTo($"/game/host/{exGame.GameSessionId}");
            return;
        }
        _packs = await Db.Packs.Include(x => x.Tags).Include(x => x.Presets).AsNoTracking().ToListAsync();
    }

    private void SelectPack(Pack pack)
    {
        _pack = pack;
        _preset = _pack.Presets.FirstOrDefault();
        StateHasChanged();
    }

    private async Task StartGame()
    {
        try
        {
            ArgumentNullException.ThrowIfNull(_pack, nameof(_pack));
            ArgumentNullException.ThrowIfNull(UserId, nameof(UserId));
            ArgumentNullException.ThrowIfNull(_preset, nameof(_preset));

            _isLoading = true;
            var game = await StateService.StartGame(_pack.Id, _preset.Data, UserId);
            NavigationManager.NavigateTo($"/game/host/{game.GameSessionId}");
        }
        catch (Exception e)
        {
            Logger.LogError(e, e.Message);
            Snackbar.Add(e.Message, Severity.Error);
        }
        finally
        {
            _isLoading = false;
        }
    }

    private Task SetPresetData(PackPresetData data)
    {
        if (_preset != null)
            _preset.Data = data;
        _isPresetEdit = false;
        StateHasChanged();
        return Task.CompletedTask;
    }

    private void CancelPresetEdit()
    {
        _isPresetEdit = false;
        StateHasChanged();
    }
}
