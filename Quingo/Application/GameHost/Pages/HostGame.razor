@page "/game/host/{GameSessionId:guid}"
@page "/game/spectate/{GameSessionId:guid}"

@using Microsoft.AspNetCore.Authorization
@using System.Security.Claims

@implements IDisposable

@inject ILogger<HostGame> Logger
@inject GameStateService StateService
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager

@attribute [Authorize]

<PageTitle>Game</PageTitle>

@if (_initError != null)
{
    <MudAlert Severity="Severity.Error">@_initError</MudAlert>
}
else if (_isInitialized)
{
    <CascadingValue Value="_game">
        <HostLayout/>
    </CascadingValue>
}

@code {
    [CascadingParameter(Name = "UserId")] private string UserId { get; set; } = default!;

    [Parameter] public Guid GameSessionId { get; set; }

    private string? _initError;

    private GameState _game = default!;

    private bool _isInitialized;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _game = await StateService.GetGameState(GameSessionId, UserId);
            var player = _game.Players.FirstOrDefault(x => x.PlayerUserId == UserId);
            if (player != null)
            {
                NavigationManager.NavigateTo($"/game/play/{_game.GameSessionId}/{player.PlayerSessionId}");
            }
            _game.StateChanged += OnStateChanged;
            _isInitialized = true;
        }
        catch (Exception e)
        {
            Logger.LogError(e, e.Message);
            _initError = e.Message;
        }
    }

    private void OnStateChanged()
    {
        InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        if (_game == null) return;

        _game.StateChanged -= OnStateChanged;
    }

}
