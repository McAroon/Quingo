@page "/game/play"

@using Microsoft.AspNetCore.Authorization
@using System.Security.Claims
@using Quingo.Shared

@inject GameService GameService
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@inject ILogger<JoinGame> Logger
@inject TempUserStorage Store

@attribute [Authorize]

<PageTitle>Join Game</PageTitle>

<MudText Typo="Typo.h3" GutterBottom>
    Join Game
    <MudTooltip Text="Refresh">
        <MudIconButton Icon="@Icons.Material.Filled.Refresh" OnClick="StateHasChanged"></MudIconButton>
    </MudTooltip>
</MudText>

<MudTable Items="GameService.Games.Where(x => x.IsStateActive)">
    <HeaderContent>
        <MudTh>Pack</MudTh>
        <MudTh>Host</MudTh>
        <MudTh>Started</MudTh>
        <MudTh>Players</MudTh>
        <MudTh>Actions</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Pack">@context.Pack.Name</MudTd>
        <MudTd DataLabel="Host">@context.HostName</MudTd>
        <MudTd DataLabel="Started">@context.StartedAt.FormatWithTimeZone(_timeZone)</MudTd>
        <MudTd DataLabel="Players">@PlayersFormat(context)</MudTd>
        <MudTd DataLabel="Actions">
            <MudButton Size="Size.Small" Color="Color.Primary" OnClick="() => Join(context)"
                       Disabled="!context.CanJoin(_userId)">Join
            </MudButton>
            <MudButton Size="Size.Small" Color="Color.Primary" OnClick="() => Spectate(context)"
                       Disabled="!context.CanSpectate(_userId)">Spectate
            </MudButton>
        </MudTd>
    </RowTemplate>
</MudTable>

@code {
    [CascadingParameter] private Task<AuthenticationState>? AuthenticationState { get; set; }

    private string? _userId;

    private string? _userName;

    private string PlayersFormat(GameInstance instance) => instance.Preset.MaxPlayers <= 0 ? instance.Players.Count.ToString() : $"{instance.Players.Count}/{instance.Preset.MaxPlayers}";

    private string? _timeZone;

    protected override async Task OnInitializedAsync()
    {
        if (AuthenticationState != null)
        {
            var auth = await AuthenticationState;
            _userId = auth.User.FindFirstValue(ClaimTypes.NameIdentifier);
            _userName = auth.User.FindFirstValue(ClaimTypes.Name);

            if (_userId != null)
            {
                _timeZone = Store.TryGet(_userId, TempUserStorage.TimeZone, out var tz) ? tz : null;
            }
        }
    }

    private void Join(GameInstance game)
    {
        try
        {
            ArgumentNullException.ThrowIfNull(_userId, nameof(_userId));
            ArgumentNullException.ThrowIfNull(_userName, nameof(_userName));

            var player = GameService.JoinGame(game.GameSessionId, _userId, _userName);
            NavigationManager.NavigateTo($"/game/play/{game.GameSessionId}/{player.PlayerSessionId}");
        }
        catch (Exception e)
        {
            if (e is not GameException)
            {
                Logger.LogError(e, e.Message);
            }
            Snackbar.Add(e.Message, Severity.Error);
        }
    }

    private void Spectate(GameInstance game)
    {
        try
        {
            ArgumentNullException.ThrowIfNull(_userId, nameof(_userId));
            ArgumentNullException.ThrowIfNull(_userName, nameof(_userName));
            GameService.SpectateGame(game.GameSessionId, _userId, _userName);
            NavigationManager.NavigateTo($"/game/spectate/{game.GameSessionId}");
        }
        catch (Exception e)
        {
            if (e is not GameException)
            {
                Logger.LogError(e, e.Message);
            }
            Snackbar.Add(e.Message, Severity.Error);
        }
    }

}
