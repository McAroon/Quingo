@page "/game/play"

@using System.Security.Claims
@using System.Text.Json
@using Microsoft.AspNetCore.Authorization
@using Quingo.Shared
@using Quingo.Shared.Constants
@using Quingo.Shared.Enums

@inject GameService GameService
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@inject ILogger<JoinGame> Logger
@inject TempUserStorage Store
@inject IDialogService DialogService
@inject TournamentLobbyService LobbyService

@attribute [Authorize]

<PageTitle>Join Game</PageTitle>

<MudText Typo="Typo.h3" GutterBottom>
    Join Game
    <MudTooltip Text="Refresh">
        <MudIconButton Icon="@Icons.Material.Filled.Refresh" OnClick="LoadAll" />
    </MudTooltip>
</MudText>

<MudTable Items="_lobbies" Dense="true" Hover="true">
    <HeaderContent>
        <MudTh>Type</MudTh>
        <MudTh>Pack</MudTh>
        <MudTh>Host</MudTh>
        <MudTh>Players</MudTh>
        <MudTh>Time</MudTh>
        <MudTh>Password</MudTh>
        <MudTh>Actions</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd>@(context.IsTournament ? "🏆 Турнир" : "🕹 Игра")</MudTd>
        <MudTd>@(context.IsTournament? context.Tournament!.PackName : context.Game!.Pack.Name)</MudTd>
        <MudTd>@(context.IsTournament? context.Tournament!.HostUserName : context.Game!.HostName)</MudTd>
        <MudTd>
            @(context.IsTournament
                        ? PlayersFormat(context.Tournament!)
                        : PlayersFormat(context.Game!))
        </MudTd>
        <MudTd>
            @(context.IsTournament
                        ? context.Tournament!.CreatedAt.ToLocalTime().ToString("g")
                        : context.Game!.StartedAt.FormatWithTimeZone(_timeZone))
        </MudTd>
        <MudTd>
            @(context.IsTournament
                        ? "—"
                        : (!string.IsNullOrWhiteSpace(context.Game!.Options.Password) ? "Yes" : "No"))
        </MudTd>
        <MudTd>
            @if (context.IsTournament)
            {
                <MudTooltip Text="Lobby is full or you are already in">
                    <MudButton Size="Size.Small"
                               Color="Color.Primary"
                               OnClick="@(() => JoinTournamentLobby(context.Tournament!.Id))">
                        Join
                    </MudButton>
                </MudTooltip>

                <AuthorizeView Roles="admin" Context="auth">
                    <MudButton Size="Size.Small"
                               Class="ml-2"
                               Color="Color.Error"
                               OnClick="@(async () => await CloseTournamentLobby(context.Tournament!.Id))">
                        Close
                    </MudButton>
                </AuthorizeView>
            }
            else
            {
                <MudButton Size="Size.Small" Color="Color.Primary"
                           Disabled="!context.Game!.CanJoin(_userId)"
                           OnClick="@(() => OnJoin(context.Game!))">
                    Join
                </MudButton>
                <MudButton Size="Size.Small" Color="Color.Secondary"
                           Disabled="!context.Game!.CanSpectate(_userId)"
                           OnClick="@(() => Spectate(context.Game!))">
                    Spectate
                </MudButton>
            }
        </MudTd>
    </RowTemplate>
</MudTable>

@code {
    [CascadingParameter] private Task<AuthenticationState>? AuthenticationState { get; set; }

    private string? _userId;
    private string? _userName;
    private string? _timeZone;

    private List<TournamentLobby> _tournamentLobbies = [];
    private List<LobbyRow> _lobbies = [];

    private record LobbyRow
    {
        public bool IsTournament { get; init; }
        public GameInstance? Game { get; init; }
        public TournamentLobby? Tournament { get; init; }
    }

    protected override async Task OnInitializedAsync()
    {
        if (AuthenticationState != null)
        {
            var auth = await AuthenticationState;
            _userId = auth.User.FindFirstValue(ClaimTypes.NameIdentifier);
            _userName = auth.User.FindFirstValue(ClaimTypes.Name);

            if (_userId != null)
            {
                _timeZone = Store.TryGet(_userId, TempUserStorage.TimeZone, out var tz) ? tz : null;
            }

            await LoadAll();
        }
    }

    private string PlayersFormat(GameInstance instance) =>
        instance.Preset.MaxPlayers <= 0
            ? instance.Players.Count.ToString()
            : $"{instance.Players.Count}/{instance.Preset.MaxPlayers}";

    private string PlayersFormat(TournamentLobby t)
    {
        if (t.TournamentMode == TournamentMode.QualificationAndPlayoff)
            return $"{t.Participants.Count}";

        var max = t.PresetData?.MaxPlayers ?? 0;
        return max <= 0
            ? t.Participants.Count.ToString()
            : $"{t.Participants.Count}/{max}";
    }

    private async Task LoadAll()
    {
        _tournamentLobbies = await LobbyService.GetActiveLobbies();

        _lobbies = GameService.Games
            .Where(x => x.IsStateActive)
            .Select(g => new LobbyRow { Game = g, IsTournament = false })
            .Concat(_tournamentLobbies
                .Where(t => t.Participants.Count > 0)
                .Select(t => new LobbyRow { Tournament = t, IsTournament = true }))
            .OrderByDescending(x => x.IsTournament)
            .ToList();

        StateHasChanged();
    }

    private void JoinTournamentLobby(int lobbyId)
    {
        NavigationManager.NavigateTo($"/game/tournament/lobby/{lobbyId}");
    }

    private async Task OnJoin(GameInstance game)
    {
        ArgumentNullException.ThrowIfNull(_userId, nameof(_userId));

        if (game.HostUserId == _userId
            || game.Players.FirstOrDefault(x => x.PlayerUserId == _userId) != null
            || string.IsNullOrWhiteSpace(game.Options.Password))
        {
            Join(game);
        }
        else
        {
            bool OnSubmit(string password)
            {
                return password == game.Options.Password && Join(game, password);
            }

            await JoinDialog.ShowDialog(DialogService, OnSubmit);
        }
    }

    private bool Join(GameInstance game, string? password = null)
    {
        try
        {
            ArgumentNullException.ThrowIfNull(_userId, nameof(_userId));
            ArgumentNullException.ThrowIfNull(_userName, nameof(_userName));

            var player = GameService.JoinGame(game.GameSessionId, _userId, _userName, password);
            NavigationManager.NavigateTo($"/game/play/{game.GameSessionId}/{player.PlayerSessionId}");
        }
        catch (Exception e)
        {
            if (e is not GameException)
            {
                Logger.LogError(e, e.Message);
            }

            Snackbar.Add(e.Message, Severity.Error);
            return false;
        }

        return true;
    }

    private void Spectate(GameInstance game)
    {
        try
        {
            ArgumentNullException.ThrowIfNull(_userId, nameof(_userId));
            ArgumentNullException.ThrowIfNull(_userName, nameof(_userName));
            GameService.SpectateGame(game.GameSessionId, _userId, _userName);
            NavigationManager.NavigateTo($"/game/spectate/{game.GameSessionId}");
        }
        catch (Exception e)
        {
            if (e is not GameException)
            {
                Logger.LogError(e, e.Message);
            }

            Snackbar.Add(e.Message, Severity.Error);
        }
    }

    private int GetMaxPlayersFromJson(string? presetJson)
    {
        if (string.IsNullOrWhiteSpace(presetJson))
            return 0;

        try
        {
            var preset = JsonSerializer.Deserialize<PackPresetData>(presetJson);
            return preset?.MaxPlayers ?? 0;
        }
        catch
        {
            return 0;
        }
    }

    private async Task CloseTournamentLobby(int lobbyId)
    {
        try
        {
            await LobbyService.CloseLobby(lobbyId, _userId!);
            Snackbar.Add($"Лобби #{lobbyId} закрыто.", Severity.Success);
            await LoadAll();
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }
}