@using System.Security.Claims
@inherits ActionBarBase

<MudStack AlignItems="AlignItems.End" Spacing="0" Class="pb-2">
    @if (ShowHostControls && Player.GameInstance.IsStateActive)
    {
        <MudButton Color="Color.Secondary" StartIcon="@Icons.Material.Filled.Stop" OnClick="ConfirmEndGame">
            End Game
        </MudButton>
        if (Game.State is GameStateEnum.Paused)
        {
            <MudButton Color="Color.Secondary"
                       StartIcon="@Icons.Material.Filled.PlayArrow" OnClick="ResumeGame">
                Resume
            </MudButton>
        }
        else if (Game.State is not GameStateEnum.Init)
        {
            <MudButton Color="Color.Secondary"
                       StartIcon="@Icons.Material.Outlined.Pause" OnClick="PauseGame"
                       Disabled="Game.State != GameStateEnum.Active">
                Pause
            </MudButton>
        }
    }
    else
    {
        <MudButton Color="Color.Secondary" StartIcon="@Icons.Material.Filled.ExitToApp" Href="/">Leave Game</MudButton>
    }
</MudStack>
<MudStack Justify="Justify.Center" Row>
    @if (Game.State is GameStateEnum.Init && !Player.IsHost)
    {
        @if (Player.Status is PlayerStatus.NotReady)
        {
            <MudButton Color="Color.Error" Size="Size.Large" Variant="Variant.Outlined"
                       StartIcon="@Icons.Material.Outlined.CheckBoxOutlineBlank"
                       OnClick="() => Player.SetStatus(PlayerStatus.Ready)">Ready
            </MudButton>
        }
        else
        {
            <MudButton Color="Color.Success" Size="Size.Large" Variant="Variant.Filled"
                       StartIcon="@Icons.Material.Outlined.CheckBox"
                       OnClick="() => Player.SetStatus(PlayerStatus.NotReady)">Ready
            </MudButton>
        }
    }
    @if (!Game.Preset.EnableCall && Game.State is GameStateEnum.Active or GameStateEnum.Paused or GameStateEnum.FinalCountdown)
    {
        @if (Player.Status is PlayerStatus.Done)
        {
            <MudButton Color="Color.Success" Size="Size.Large" Variant="Variant.Filled"
                       StartIcon="@Icons.Material.Outlined.CheckBox"
                       OnClick="() => Player.SetStatus(PlayerStatus.Ready)"
                       Disabled="Game.Preset.AutoDrawTimer > 0">I'm Done
            </MudButton>
        }
        else
        {
            <MudButton Color="Color.Success" Size="Size.Large" Variant="Variant.Outlined"
                       StartIcon="@Icons.Material.Outlined.CheckBoxOutlineBlank"
                       OnClick="() => Player.SetStatus(PlayerStatus.Done)">I'm Done
            </MudButton>
        }
    }
    @if (ShowHostControls && Game.IsStateActive && Game.State is GameStateEnum.Init)
    {
        <MudButton Color="Game.AllPlayersReady ? Color.Success : Color.Error" Size="Size.Large"
                   Variant="Variant.Filled"
                   StartIcon="@Icons.Material.Outlined.PlayArrow" OnClick="ResumeGame">
            Start
        </MudButton>
    }
    @if (Player.GameInstance.Preset.EnableCall)
    {
        <MudButton Color="Color.Primary" Size="Size.Large" Variant="Variant.Filled"
                   StartIcon="@Icons.Material.Outlined.BackHand" OnClick="Call"
                   Disabled="!AllowCall">Call
        </MudButton>
    }
    @if ((ShowHostControls || Player.DrawState.PlayerCanDraw(UserId))
         && Game.IsStateActive && Game.State is not GameStateEnum.Init)
    {
        <MudBreakpointProvider>
            <MudHidden Invert Breakpoint="Breakpoint.MdAndUp">
                <MudButton Color="Color.Primary" Size="Size.Large" Variant="Variant.Filled"
                           StartIcon="@Icons.Material.Outlined.SkipNext" OnClick="Draw"
                           Disabled="DisableDraw">Next
                </MudButton>
            </MudHidden>
            <MudHidden Invert Breakpoint="Breakpoint.SmAndDown">
                <div class="fab-br">
                    <MudFab StartIcon="@Icons.Material.Outlined.SkipNext" Color="Color.Primary" OnClick="Draw"
                            Label="Next"
                            Disabled="DisableDraw"/>
                </div>
            </MudHidden>
        </MudBreakpointProvider>
    }
    @if (!Game.IsStateActive)
    {
        if (Game.IsTournament)
        {
            <MudButton Color="Color.Primary" Size="Size.Large" Variant="Variant.Filled"
                       StartIcon="@Icons.Material.Outlined.Group" OnClick="GoToLobby"
                       Disabled="IsLoading">
                Back to Lobby
            </MudButton>
        }
        else if (ShowHostControls)
        {
            <MudButton Color="Color.Primary" Size="Size.Large" Variant="Variant.Filled"
                       StartIcon="@Icons.Material.Outlined.Refresh" OnClick="PlayAgain"
                       Disabled="IsLoading">
                Play Again
            </MudButton>
        }
    }
</MudStack>

@code {
    [CascadingParameter] public PlayerInstance Player { get; set; } = default!;

    [CascadingParameter(Name = "UserId")] public override string UserId { get; set; } = default!;

    [CascadingParameter] private Task<AuthenticationState>? AuthenticationState { get; set; }

    public override GameInstance Game => Player.GameInstance;

    private bool AllowCall => Player.GameInstance.State is GameStateEnum.Active or GameStateEnum.FinalCountdown
                              && Player.GameInstance.Preset.EnableCall
                              && Player.LivesNumber > 0 && !Player.GameInstance.WinningPlayers.Contains(Player);

    protected override bool DisableDraw => !Player.DrawState.CanDraw 
                                           || (Player.DrawState.PlayerCanDraw(UserId) && Player.Status is PlayerStatus.Done) 
                                           || (!Player.DrawState.PlayerCanDraw(UserId) && !ShowHostControls);

    private bool ShowHostControls => Player.IsHost || _user?.IsInRole("admin") == true;

    private ClaimsPrincipal? _user;

    [Inject] private NavigationManager Navigation { get; set; } = default!;

    private void GoToLobby()
    {
        if (Game.LobbyId != 0)
            Navigation.NavigateTo($"/game/tournament/lobby/{Game.LobbyId}");
    }

    protected override async Task OnInitializedAsync()
    {
        if (AuthenticationState != null)
        {
            _user = (await AuthenticationState)?.User;
        }
    }

    private void Call()
    {
        try
        {
            if (AllowCall)
            {
                Player.GameInstance.Call(Player);
            }
        }
        catch (Exception e)
        {
            Logger.LogError(e, e.Message);
            Snackbar.Add(e.Message, Severity.Error);
        }
    }

    protected override void DrawFunc()
    {
        if (Player.DrawState.PlayerCanDraw(UserId))
        {
            Player.DrawState.Draw();
        }
        else
        {
            base.DrawFunc();
        }
    }

}