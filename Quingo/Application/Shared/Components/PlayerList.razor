@implements IDisposable
@inject ISnackbar Snackbar

<MudTable Items="Game.Players">
    <HeaderContent>
        <MudTh>Name</MudTh>
        <MudTh>Lives</MudTh>
        @if (ShowScore)
        {
            <MudTh>Score</MudTh>
        }
        @if (ShowActions)
        {
            <MudTh>Actions</MudTh>
        }
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Name">@context.PlayerName</MudTd>
        <MudTd DataLabel="Lives">@context.LivesNumber</MudTd>
        @if (ShowScore)
        {
            <MudTd DataLabel="Score">@context.Score</MudTd>
        }
        @if (ShowActions)
        {
            <MudTd DataLabel="Actions">
                <MudButton Size="Size.Small" Color="Color.Primary" OnClick="() => ViewPlayer(context)">View</MudButton>
            </MudTd>
        }
    </RowTemplate>
</MudTable>

<MudDialog @bind-Visible="_dialogVisible" Options="_dialogOptions">
    <TitleContent>
        View player: @_selectedPlayer?.PlayerName
    </TitleContent>
    <DialogContent>
        <CascadingValue Value="_selectedPlayer">
            <PlayerCard ReadOnly ShowDetails />
        </CascadingValue>
    </DialogContent>
</MudDialog>

@code {
    [CascadingParameter]
    public GameState Game { get; set; } = default!;

    [Parameter]
    public PlayerState? Player { get; set; }

    private bool ShowActions => Player == null || Game.State is GameStateEnum.Finished or GameStateEnum.Canceled;
    
    private bool ShowScore => Player == null || Game.State is GameStateEnum.Finished or GameStateEnum.Canceled;

    private DialogOptions _dialogOptions = new DialogOptions
        {
            MaxWidth = MaxWidth.Large,
            FullWidth = false,
            CloseButton = true
        };

    private PlayerState? _selectedPlayer;

    private bool _dialogVisible;

    private void ViewPlayer(PlayerState player)
    {
        _selectedPlayer = player;
        _dialogVisible = true;
    }

    protected override void OnInitialized()
    {
        Game.PlayerJoined += OnPlayerJoined;
        foreach (var player in Game.Players)
        {
            player.StateChanged += OnStateChanged;
            player.LifeLost += OnLifeLost;
        }
    }

    private void OnPlayerJoined(PlayerState player)
    {
        Snackbar.Add($"{player.PlayerName} has joined!", Severity.Info);
        player.StateChanged += OnStateChanged;
        player.LifeLost += OnLifeLost;
    }

    private void OnStateChanged()
    {
        InvokeAsync(StateHasChanged);
    }

    private void OnLifeLost(PlayerState player)
    {
        if (player != Player)
        {
            Snackbar.Add($"{player.PlayerName} has lost a life ({player.LivesNumber})", Severity.Info);
        }
        else
        {
            var text = player.LivesNumber > 1
                ? $"{player.LivesNumber} lives left."
                : player.LivesNumber == 1
                    ? $"1 life left."
                    : "You have no more lives. Game over.";
            Snackbar.Add($"Incorrect! {text}", Severity.Error);
        }
    }

    public void Dispose()
    {
        Game.PlayerJoined -= OnPlayerJoined;
        foreach (var player in Game.Players)
        {
            player.StateChanged -= OnStateChanged;
            player.LifeLost -= OnLifeLost;
        }
    }
}
