<MudGrid>
    <MudItem xs="12">
        @if (IsEdit)
        {
            <MudCard>
                <MudCardContent>
                    <MudForm @ref="@_form">
                        <MudNumericField @bind-Value="_model.CardSize" @bind-Value:after="OnCardSizeUpdated"
                                         Label="Card Size" Min="1" Max="9" Required/>
                        <MudCheckBox @bind-Value="_model.FreeCenter" Label="Free Center"
                                     Disabled="!_model.IsFreeCenterEnabled"/>
                        <MudNumericField @bind-Value="_model.MaxPlayers" Label="Number of Players"
                                         HelperText="Max number of players, 0 for unlimited" Min="0"/>
                        <MudNumericField @bind-Value="_model.GameTimer" Label="Game Timer"
                                         HelperText="Game timer in seconds, 0 for no timer" Min="0"/>
                        <MudNumericField @bind-Value="_model.EndgameTimer" Label="Endgame Timer" Min="0"/>
                        <MudSelect T="PackPresetPattern" Label="Winning Pattern" @bind-Value="@_model.Pattern">
                            <MudSelectItem Value="PackPresetPattern.Lines">Line</MudSelectItem>
                            <MudSelectItem Value="PackPresetPattern.FullCard">Full Card</MudSelectItem>
                        </MudSelect>
                        <MudSelect T="PackPresetMatchRule" Label="Match Rule" @bind-Value="@_model.MatchRule">
                            <MudSelectItem Value="PackPresetMatchRule.Default">Default</MudSelectItem>
                            <MudSelectItem Value="PackPresetMatchRule.LastDrawn">Last Drawn Only</MudSelectItem>
                        </MudSelect>
                        <MudCheckBox @bind-Value="_model.EnableCall" Label="Enable Call"/>
                        <MudNumericField @bind-Value="_model.LivesNumber" Label="Number of Lives" Min="0"
                                         Disabled="!_model.EnableCall"/>
                        <MudCheckBox @bind-Value="_model.JoinOnCreate" Label="Host Joins Game"/>
                        <MudCheckBox @bind-Value="_model.ShowTagBadges" Label="Show Tag Badges"/>
                        <MudCheckBox @bind-Value="_model.SingleColumnConfig" Label="Same Column Config"/>

                        <MudText Typo="Typo.h6" Class="pt-2">Columns</MudText>

                        <MudExpansionPanels MultiExpansion>
                            @foreach (var col in _model.Columns)
                            {
                                <MudExpansionPanel Text="@col.Name">
                                    <MudPaper Class="pa-4 mb-2">
                                        <MudGrid>
                                            <MudItem xs="12">
                                                <MudTextField Label="Column Name" @bind-Value="col.Name"/>
                                                <MudSelect T="int" MultiSelection Label="Exclude Tags"
                                                           @bind-SelectedValues="col.ExcludeTags"
                                                           MultiSelectionTextFunc="GetTagsSelectText"
                                                           Disabled="@(_model.SingleColumnConfig && _model.Columns.IndexOf(col) > 0)"
                                                           @bind-SelectedValues:after="() => OnColumnConfigUpdated(col)">
                                                    @foreach (var tag in Pack.Tags)
                                                    {
                                                        <MudSelectItem T="int" Value="@tag.Id">@tag.Name</MudSelectItem>
                                                    }
                                                </MudSelect>
                                                <MudSelect T="int" MultiSelection Label="Question Tags"
                                                           @bind-SelectedValues="col.QuestionTags"
                                                           MultiSelectionTextFunc="GetTagsSelectText"
                                                           Disabled="@(_model.SingleColumnConfig && _model.Columns.IndexOf(col) > 0)"
                                                           @bind-SelectedValues:after="() => OnColumnConfigUpdated(col)">
                                                    @foreach (var tag in Pack.Tags)
                                                    {
                                                        <MudSelectItem T="int" Value="@tag.Id">@tag.Name</MudSelectItem>
                                                    }
                                                </MudSelect>
                                                <MudSelect T="PackPresetTagModel" MultiSelection Label="Answer Tags"
                                                           @bind-SelectedValues="col.AnswerTags"
                                                           MultiSelectionTextFunc="GetTagsSelectText"
                                                           Comparer="@(new PackPresetTagModel.PackPresetTagModelComparer())"
                                                           Disabled="@(_model.SingleColumnConfig && _model.Columns.IndexOf(col) > 0)"
                                                           @bind-SelectedValues:after="() => OnColumnConfigUpdated(col)">
                                                    @foreach (var tag in Pack.Tags)
                                                    {
                                                        <MudSelectItem T="PackPresetTagModel"
                                                                       Value="@(new PackPresetTagModel(tag.Id))">@tag.Name</MudSelectItem>
                                                    }
                                                </MudSelect>
                                            </MudItem>
                                            <MudItem xs="12">
                                                <MudText Typo="Typo.body1" Class="pt-2 pb-2">Player Card Generation
                                                </MudText>
                                                <MudSimpleTable>
                                                    <thead>
                                                    <tr>
                                                        <th>Tag</th>
                                                        <th>Min Items</th>
                                                        <th>Max Items</th>
                                                    </tr>
                                                    </thead>
                                                    <tbody>
                                                    @foreach (var tag in col.AnswerTags.OrderBy(x => x.TagId))
                                                    {
                                                        <tr>
                                                            <td>
                                                                <MudChip T="string" Variant="Variant.Filled"
                                                                         Color="Color.Info"
                                                                         Class="align-self-end">@GetTagName(tag.TagId)</MudChip>
                                                            </td>
                                                            <td>
                                                                <MudNumericField T="int?"
                                                                                 @bind-Value="@tag.ItemsMin"
                                                                                 Min="0"/>
                                                            </td>
                                                            <td>
                                                                <MudNumericField T="int?"
                                                                                 @bind-Value="@tag.ItemsMax"
                                                                                 Min="0"/>
                                                            </td>
                                                        </tr>
                                                    }
                                                    </tbody>
                                                </MudSimpleTable>
                                            </MudItem>
                                        </MudGrid>
                                    </MudPaper>
                                </MudExpansionPanel>
                            }
                        </MudExpansionPanels>
                    </MudForm>
                </MudCardContent>
                <MudCardActions>
                    <div class="ml-auto">
                        <MudButton Color="Color.Primary" OnClick="Save" StartIcon="@Icons.Material.Filled.Save">Save
                        </MudButton>
                        <MudButton Color="Color.Secondary" OnClick="CancelEdit"
                                   StartIcon="@Icons.Material.Filled.Cancel">Cancel
                        </MudButton>
                    </div>
                </MudCardActions>
            </MudCard>
        }
        else
        {
            <MudList T="string" ReadOnly>
                <MudListItem Text="Card Size" SecondaryText="@_model.CardSize.ToString()"/>
                <MudListItem Text="Free Center" SecondaryText="@(_model.FreeCenter ? "Yes" : "No")"/>
                <MudListItem Text="Number of Players" SecondaryText="@_model.MaxPlayers.ToString()"/>
                <MudListItem Text="Game Timer" SecondaryText="@_model.GameTimer.ToString()"/>
                <MudListItem Text="Endgame Timer" SecondaryText="@_model.EndgameTimer.ToString()"/>
                <MudListItem Text="Winning Pattern"
                             SecondaryText="@(_model.Pattern == PackPresetPattern.Lines ? "Line" : "Full Card")"/>
                <MudListItem Text="Match Rule"
                             SecondaryText="@(_model.MatchRule == PackPresetMatchRule.Default ? "Default" : "Last Drawn Only")"/>
                <MudListItem Text="Enable Call" SecondaryText="@(_model.EnableCall ? "Yes" : "No")"/>
                <MudListItem Text="Number of Lives"
                             SecondaryText="@(_model.EnableCall ? _model.LivesNumber.ToString() : "-")"/>
                <MudListItem Text="Host Joins Game" SecondaryText="@(_model.JoinOnCreate ? "Yes" : "No")"/>
                <MudListItem Text="Show Tag Badges" SecondaryText="@(_model.ShowTagBadges ? "Yes" : "No")"/>
                @for (var i = 0; i < _model.Columns.Count; i++)
                {
                    var col = _model.Columns[i];
                    <MudListItem Text="@($"Column {i + 1}")" Expanded="false">
                        <NestedList>
                            <MudListItem Text="Name" SecondaryText="@col.Name"/>
                            <MudListItem Text="Question Tags" SecondaryText="@GetTagsSelectText(col.QuestionTags)"/>
                            <MudListItem Text="Answer Tags"
                                         SecondaryText="@GetTagsSelectText(col.AnswerTags.Select(x => x.TagId))"/>
                            <MudListItem Text="Exclude Tags" SecondaryText="@GetTagsSelectText(col.ExcludeTags)"/>
                        </NestedList>
                    </MudListItem>
                }
            </MudList>
        }
    </MudItem>
</MudGrid>


@code {
    [Parameter, EditorRequired] public PackPreset Preset { get; set; } = default!;

    [Parameter] public bool IsEdit { get; set; }

    [Parameter] public Func<PackPresetData, Task>? OnSave { get; set; }

    [Parameter] public Action? OnCancelEdit { get; set; }

    [Parameter, EditorRequired] public Pack Pack { get; set; } = default!;

    private MudForm _form = default!;

    private PackPresetDataModel _model = default!;

    protected override void OnParametersSet()
    {
        _model = new PackPresetDataModel(Preset.Data);
    }

    private void OnCardSizeUpdated()
    {
        if (!_model.IsFreeCenterEnabled)
        {
            _model.FreeCenter = false;
        }

        _model.Columns.MatchListSize(_model.CardSize, () => new PackPresetColumnModel());
    }

    private string GetTagsSelectText(IList<string> selected)
    {
        return GetTagsSelectText(selected.Select(int.Parse));
    }

    private string GetTagsSelectText(IEnumerable<int> selected)
    {
        var selectedList = selected.ToList();
        var tags = Pack.Tags.Where(x => selectedList.Contains(x.Id)).Select(x => x.Name).ToList();
        return tags.Count > 0 ? string.Join(", ", tags) : "-";
    }

    private string? GetTagName(int tagId) => Pack.Tags.FirstOrDefault(x => x.Id == tagId)?.Name;

    private void OnColumnConfigUpdated(PackPresetColumnModel col)
    {
        if (!_model.SingleColumnConfig || _model.Columns.IndexOf(col) != 0) return;
        foreach (var pCol in _model.Columns.Skip(1))
        {
            pCol.QuestionTags = [..col.QuestionTags];
            pCol.AnswerTags = [..col.AnswerTags];
            pCol.ExcludeTags = [..col.ExcludeTags];
        }

        StateHasChanged();
    }

    private async Task Save()
    {
        await _form.Validate();
        if (_form.IsValid && OnSave != null)
        {
            await OnSave(_model.ToData());
        }
    }

    private void CancelEdit()
    {
        OnCancelEdit?.Invoke();
        _model = new PackPresetDataModel(Preset.Data);
        StateHasChanged();
    }

}
