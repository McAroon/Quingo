<NodeSquare Node="Node" CellState="CellState" OnClick="@(OnNodeClick!)" ShowTagBadge="ShowTagBadge" ShowTagBadgeTooltip="ShowTagBadge" />

@code {
    [CascadingParameter]
    public PlayerState State { get; set; } = default!;

    [Parameter, EditorRequired]
    public PlayerCardCellData Cell { get; set; } = default!;

    [Parameter]
    public bool ReadOnly { get; set; }

    [Parameter]
    public bool ShowDetails { get; set; }

    [Parameter]
    public Action<PlayerCardCellData>? OnClick { get; set; }

    private Action? OnNodeClick => OnClick != null ? () => OnClick(Cell) : null;

    private NodeViewModel? Node => Cell.Node == null ? null : new NodeViewModel(Cell.Node, State.GameState.Preset, ShowLinksByTagEnum.Answer);

    private bool ShowTagBadge => State.GameState.Preset.ShowTagBadges;

    private PlayerCardCellState CellState
    {
        get
        {
            if (ShowDetails)
                return Cell.State;
            else if (Cell.State is PlayerCardCellState.MatchingPattern)
                return PlayerCardCellState.MatchingPattern;
            else if (Cell.State is PlayerCardCellState.Marked or PlayerCardCellState.Invalid)
                return PlayerCardCellState.Marked;
            return PlayerCardCellState.Default;
        }    
    }
}
