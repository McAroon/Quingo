@inject IDialogService Dialog

<MudStack Spacing="1" Row Class="pb-2" Wrap="Wrap.NoWrap">
    @foreach (var col in State.GameState.Preset.Columns)
    {
        <MudCard Outlined Class="node-square node-header">
            <MudCardContent Class="node-square-content">
                <MudText Align="Align.Center" Typo="Typo.h5">
                    <span class="node-text">@col.Name</span>
                </MudText>
            </MudCardContent>
        </MudCard>
    }
</MudStack>

@for (int row = 0; row < State.Card.Cells.GetLength(1); row++)
{
    var cRow = row;
    <MudStack Spacing="1" Row Class="pb-1" Wrap="Wrap.NoWrap">
        @for (int col = 0; col < State.Card.Cells.GetLength(0); col++)
        {
            var cell = State.Card.Cells[col, cRow];
            <PlayerCardCell Cell="cell" ShowDetails="ShowDetails" OnClick="@(OnCellClick(cell)!)" />
        }
    </MudStack>
}

@code {
    [CascadingParameter]
    public PlayerState State { get; set; } = default!;

    [Parameter]
    public bool ReadOnly { get; set; }

    [Parameter]
    public bool ShowDetails { get; set; }

    private PackPresetData Preset => State.GameState.Preset;

    private bool CanMark => !ReadOnly && State.GameState.State is GameStateEnum.Active or GameStateEnum.FinalCountdown && (Preset.MatchRule is PackPresetMatchRule.Default || State.GameState.DrawnNodes.Count > 0); 

    private bool CanUndoMark(PlayerCardCellData cell) => !cell.IsMarked || Preset.MatchRule is PackPresetMatchRule.Default || cell.MatchedQNode == State.GameState.DrawnNodes.LastOrDefault();

    private bool CanMarkCell(PlayerCardCellData cell) => CanMark && CanUndoMark(cell);

    private Action<PlayerCardCellData>? OnCellClick(PlayerCardCellData cell) => CanMarkCell(cell) ? Mark : ShowDetails ? ShowCellDetails : null;

    private void Mark(PlayerCardCellData cell)
    {
        if (CanMarkCell(cell))
        {
            State.Mark(cell.Col, cell.Row);
        }
    }

    private async void ShowCellDetails(PlayerCardCellData cell)
    {
        var model = cell.Node == null ? null : new NodeViewModel(cell.Node, State.GameState.Preset);
        await NodeDetailsDialog.ShowNodeDetails(Dialog, State.GameState, model);
    }
}
