@inject IDialogService Dialog

@implements IDisposable

<MudStack Spacing="1" Row Class="pb-2" Wrap="Wrap.NoWrap">
    @foreach (var col in State.GameState.Preset.Columns)
    {
        <MudCard Outlined Class="node-square node-header">
            <MudCardContent Class="node-square-content">
                <MudText Align="Align.Center" Typo="Typo.h5">
                    <span class="node-text">@col.Name</span>
                </MudText>
            </MudCardContent>
        </MudCard>
    }
</MudStack>

@for (int row = 0; row < State.Card.Cells.GetLength(1); row++)
{
    var cRow = row;
    <MudStack Spacing="1" Row Class="pb-1" Wrap="Wrap.NoWrap">
        @for (int col = 0; col < State.Card.Cells.GetLength(0); col++)
        {
            var cell = State.Card.Cells[col, cRow];
            <PlayerCardCell Cell="cell" ShowDetails="ShowDetails" OnClick="@(OnCellClick(cell)!)"/>
        }
    </MudStack>
}

@code {
    [CascadingParameter] public PlayerState State { get; set; } = default!;

    [Parameter] public bool ReadOnly { get; set; }

    [Parameter] public bool ShowDetails { get; set; }

    private PackPresetData Preset => State.GameState.Preset;

    private bool CanMark => !ReadOnly && State.GameState.State is GameStateEnum.Active or GameStateEnum.FinalCountdown && (Preset.MatchRule is PackPresetMatchRule.Default || State.DrawState.DrawnNodes.Count > 0);


    private bool RequireUnmarkConfirmation(PlayerCardCellData cell) => Preset.MatchRule is PackPresetMatchRule.LastDrawn
                                                                       && cell.IsMarked
                                                                       && cell.MatchedQNode != null
                                                                       && cell.MatchedQNode != State.DrawState.DrawnNodes.LastOrDefault();
    private Guid? _gameSessionId;

    private bool _isInitialized;

    protected override void OnInitialized()
    {
        InitializeGame();
        _isInitialized = true;
    }

    protected override void OnParametersSet()
    {
        if (State.GameState.GameSessionId == _gameSessionId) return;

        _isInitialized = false;
        InitializeGame();
        _isInitialized = true;
    }

    private void InitializeGame()
    {
        _gameSessionId = State.GameState.GameSessionId;
        State.DrawState.NodeDrawn += OnNodeDrawn;
    }

    private void OnNodeDrawn()
    {
        InvokeAsync(StateHasChanged);
    }

    private Action<PlayerCardCellData>? OnCellClick(PlayerCardCellData cell)
    {
        if (CanMark)
        {
            if (RequireUnmarkConfirmation(cell))
            {
                return ShowUnmarkConfirmation;
            }

            return Mark;
        }

        if (ShowDetails)
        {
            return ShowCellDetails;
        }

        return null;
    }

    private void Mark(PlayerCardCellData cell)
    {
        if (CanMark)
        {
            State.Mark(cell.Col, cell.Row);
        }
    }

    private async void ShowCellDetails(PlayerCardCellData cell)
    {
        var model = cell.Node == null ? null : new NodeViewModel(cell.Node, State.GameState.Preset);
        await NodeDetailsDialog.ShowNodeDetails(Dialog, State.DrawState, model);
    }

    private async void ShowUnmarkConfirmation(PlayerCardCellData cell)
    {
        var result = await Dialog.ShowMessageBox("Confirmation", "The cell will be unmarked", "OK", null, "Cancel");
        if (result == true)
        {
            State.Mark(cell.Col, cell.Row);
        }
    }
    
    public void Dispose()
    {
        State.DrawState.NodeDrawn -= OnNodeDrawn;
    }
}