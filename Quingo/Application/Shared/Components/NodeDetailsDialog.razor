<MudDialog>
    <DialogContent>
        <MudStack Spacing="1" Row Wrap="Wrap.Wrap" Class="pt-1 pb-2">
            <NodeSquare Node="Node" ShowTagBadgeTooltip ShowTagBadge />
        </MudStack>
        @if (_drawnLinkedNodes.Count > 0)
        {
            <MudText Typo="Typo.h6" GutterBottom>Drawn Linked Items</MudText>
            <MudStack Spacing="1" Row Wrap="Wrap.Wrap" Class="pb-1">
                @foreach (var node in _drawnLinkedNodes)
                {
                    <NodeSquare Node="node" ShowTagBadgeTooltip ShowTagBadge CellState="PlayerCardCellState.Marked" />
                }
            </MudStack>
        }
        @if (_linkedNodes.Count > 0)
        {
            <MudText Typo="Typo.h6" GutterBottom>All Linked Items</MudText>
            <MudStack Spacing="1" Row Wrap="Wrap.Wrap" Class="pb-1">
                @foreach (var node in _linkedNodes)
                {
                    <NodeSquare Node="node" ShowTagBadgeTooltip ShowTagBadge />
                }
            </MudStack>
        }
    </DialogContent>
</MudDialog>

@code {
    [Parameter]
    public GameDrawState State { get; set; } = default!;

    [Parameter]
    public NodeViewModel? Node { get; set; }

    private List<NodeViewModel> _linkedNodes = [];
    
    private List<NodeViewModel> _drawnLinkedNodes = [];

    protected override void OnInitialized()
    {
        if (Node == null) return;

        var linkedNodes = new NodeLinkSearch(State.GameInstance.Pack.Nodes.First(x => x.Id == Node.Id), State.GameInstance.Pack.Nodes.AsReadOnly())
            .Search()
            .GroupBy(x => x)
            .Select(x => x.First())
            .Select(x => (node: new NodeViewModel(x, State.GameInstance.Preset), drawn: State.DrawnNodes.Contains(x)))
            .ToList();

        _linkedNodes = linkedNodes.Select(x => x.node).ToList();
        _drawnLinkedNodes = linkedNodes.Where(x => x.drawn).Select(x => x.node).ToList();
    }

    public static async Task ShowNodeDetails(IDialogService dialog, GameDrawState state, NodeViewModel? nodeModel)
    {
        var parameters = new DialogParameters<NodeDetailsDialog>
        {
            { x => x.State, state },
            { x => x.Node, nodeModel },
        };

        var opts = new DialogOptions
            {
                CloseButton = true,
                MaxWidth = MaxWidth.Small,
                FullWidth = true
            };

        await dialog.ShowAsync<NodeDetailsDialog>("Item Details", parameters, opts);
    }
}
