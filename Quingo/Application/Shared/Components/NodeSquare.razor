@inject FileStoreService Files

<MudCard Class="@CardClass" @onclick="OnCardClick">   
    <MudCardContent Class="node-square-content" Style="@ImageStyle">
        <div class="node-badges">
            @if (ShowTagsBadge && BadgeText != null)
            {
                <MudChip T="string" Size="Size.Small" Color="Color.Info" Variant="Variant.Filled" Class="node-badge">@BadgeText</MudChip>
            }
        </div>
        <MudText Align="Align.Center" Typo="Typo.h6" Class="node-text">
            @(Node?.Name ?? "FREE")
        </MudText>
    </MudCardContent>
</MudCard>

@code {
    [Parameter, EditorRequired]
    public Node? Node { get; set; }

    [Parameter]
    public bool Highlighted { get; set; }

    [Parameter]
    public bool Selected { get; set; }

    [Parameter]
    public bool ShowTagsBadge { get; set; }

    [Parameter]
    public Action? OnClick { get; set; }

    private Action OnCardClick => OnClick ?? (() => {});

    private string? ImageStyle => string.IsNullOrEmpty(Node?.ImageUrl) 
        ? null 
        : $"background-image: url(\"{Files.GetFileUrl(Node.ImageUrl)}\");";

    private string CardClass => string.Join(" ", 
        ["node-square", Highlighted ? "node-highlighted" : "", 
    Selected ? "node-selected" : "", OnClick != null ? "node-clickable" : ""]);

    private string? BadgeText => Node != null ? string.Join(", ", Node.NodeTags.Where(x => x.DeletedAt == null).Select(t => t.Tag.Name)) : null;
}
