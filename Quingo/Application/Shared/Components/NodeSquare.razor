@inject FileStoreService Files

<MudCard Class="@CardClass" @onclick="OnCardClick">
    <MudCardContent Class="node-square-content" Style="@_imageStyle">
        <div class="node-badges">
            @if (ShowTagBadge && _badgeText != null)
            {
                if (ShowTagBadgeTooltip && Node?.NodeLinksByTag?.Count > 0)
                {
                    var from = Node.NodeLinksByTag.Where(x => x.LinkDirection == NodeLinkDirection.From).ToList();
                    var rest = Node.NodeLinksByTag.Where(x => x.LinkDirection != NodeLinkDirection.From).ToList();

                    <MudTooltip Placement="Placement.Right" Disabled="rest.Count == 0">
                        <ChildContent>
                            <MudTooltip Placement="Placement.Left" Disabled="from.Count == 0">
                                <ChildContent>
                                    <MudChip T="string" Size="Size.Small" Color="Color.Info" Variant="Variant.Filled" Class="chip-xs node-badge">@_badgeText</MudChip>
                                </ChildContent>
                                <TooltipContent>
                                    @foreach (var link in from)
                                    {
                                        <div>
                                            <MudChip T="string" Size="Size.Small" Color="Color.Info" Variant="Variant.Filled" Class="chip-xs">@link.Tag.Name</MudChip><MudIcon Size="Size.Small" Class="icon-inline" Icon="@NodeLinkDirection.To.MudIcon()" /><MudChip T="string" Size="Size.Small" Color="Color.Dark" Variant="Variant.Filled" Class="chip-xs">@link.LinkType.Name</MudChip>
                                        </div>
                                    }
                                </TooltipContent>
                            </MudTooltip>
                        </ChildContent>
                        <TooltipContent>
                            @foreach (var link in rest)
                            {
                                <div>
                                    <MudChip T="string" Size="Size.Small" Color="Color.Dark" Variant="Variant.Filled" Class="chip-xs">@link.LinkType.Name</MudChip><MudIcon Size="Size.Small" Class="icon-inline" Icon="@link.LinkDirection.MudIcon()" /><MudChip T="string" Size="Size.Small" Color="Color.Info" Variant="Variant.Filled" Class="chip-xs">@link.Tag.Name</MudChip>
                                </div>
                            }
                        </TooltipContent>
                    </MudTooltip>
                }
                else
                {
                    <MudChip T="string" Size="Size.Small" Color="Color.Info" Variant="Variant.Filled" Class="chip-xs node-badge">@_badgeText</MudChip>
                }
            }
        </div>
        <MudText Align="Align.Center" Typo="Typo.h6" Class="node-text">
            @(Node?.Name ?? "FREE")
        </MudText>
    </MudCardContent>
</MudCard>

@code {
    [Parameter, EditorRequired]
    public NodeViewModel? Node { get; set; }

    [Parameter]
    public PlayerCardCellState CellState { get; set; }

    [Parameter]
    public bool ShowTagBadge { get; set; }

    [Parameter]
    public bool ShowTagBadgeTooltip { get; set; }

    [Parameter]
    public Action? OnClick { get; set; }

    private Action OnCardClick => OnClick ?? (() => { });

    private string StateClass => CellState switch
    {
        PlayerCardCellState.Marked => "node-primary",
        PlayerCardCellState.Invalid => "node-error",
        PlayerCardCellState.Missing => "node-warning",
        PlayerCardCellState.MatchingPattern => "node-success",
        _ => ""
    };

    private string CardClass => string.Join(" ",
        ["node-square", StateClass, OnClick != null ? "clickable mud-ripple" : ""]);

    private string? _imageStyle;

    private string? _badgeText;

    protected override void OnParametersSet()
    {
        _imageStyle = string.IsNullOrEmpty(Node?.ImageUrl)
            ? null
            : $"background-image: url(\"{Files.GetFileUrl(Node.ImageUrl)}\");";

        _badgeText = Node != null ? string.Join(", ", Node.NodeTags.Select(t => t.Name)) : null;
    }
}
