@inject IDialogService Dialog
@inject IJSRuntime Js

@implements IDisposable

@if (_isInitialized)
{
    <MudStack Spacing="1" Row="Row" Wrap="Wrap.NoWrap" Class="@StackClass" id="q-list" Reverse>
        @foreach (var node in _nodes)
        {
            <NodeSquare Node="node" CellState="GetCellState(node)" ShowTagBadge
                        ShowTagBadgeTooltip="Game.Preset.ShowTagBadges" OnClick="OnClick(node)!" />
        }
    </MudStack>
}

@code {
    [Parameter, EditorRequired]
    public GameState Game { get; set; } = default!;

    [Parameter]
    public int ItemsToDisplay { get; set; }

    [Parameter]
    public bool ShowDetails { get; set; }

    [Parameter]
    public bool Row { get; set; }

    private bool _toggleHighlight = true;

    private List<NodeViewModel> _nodes = [];

    private Func<NodeViewModel, Action?> OnClick => (node) => ShowDetails ? () => ShowNodeDetails(node) : null;

    private CancellationTokenSource _blinkCancelSrc = new();
    
    private string StackClass => Row ? "overflow-y-scroll pb-2" : "overflow-x-scroll pr-2 d-inline-flex";

    private Guid? _gameSessionId;

    private bool _isInitialized;

    protected override void OnInitialized()
    {
        InitializeGame();
        _isInitialized = true;
    }

    protected override void OnParametersSet()
    {
        if (Game.GameSessionId == _gameSessionId) return;

        _isInitialized = false;
        InitializeGame();
        _isInitialized = true;
    }

    private void InitializeGame()
    {
        _gameSessionId = Game.GameSessionId;
        _nodes = GetNodes();
        Game.NodeDrawn += OnNodeDrawn;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && _nodes.Count > 0)
        {
            await Task.Delay(100);
            await Js.InvokeAsync<bool>("window.scrollToLastChild", "q-list");
        }
    }

    private PlayerCardCellState GetCellState(NodeViewModel node) =>
        node.Id == Game.DrawnNodes.Last().Id && _toggleHighlight ? PlayerCardCellState.Marked : default;

    private async void ShowNodeDetails(NodeViewModel node)
    {
        await NodeDetailsDialog.ShowNodeDetails(Dialog, Game, node);
    }

    private List<NodeViewModel> GetNodes()
    {
        return (ItemsToDisplay > 0 ? Game.DrawnNodes.TakeLast(ItemsToDisplay) : Game.DrawnNodes)
        .Select(x => new NodeViewModel(x, Game.Preset, ShowLinksByTagEnum.Question)).ToList();
    }

    private void OnNodeDrawn()
    {
        InvokeAsync(async () =>
      {
          _nodes = GetNodes();
          StateHasChanged();
          await Task.Delay(100);
          await Js.InvokeAsync<bool>("window.scrollToLastChild", "q-list");
          await Blink();
      });
    }

    private async Task Blink()
    {
        await _blinkCancelSrc.CancelAsync();
        _blinkCancelSrc = new();
        var token = _blinkCancelSrc.Token;

        for (int i = 0; i < 6; i++)
        {
            if (token.IsCancellationRequested) break;

            _toggleHighlight = !_toggleHighlight;
            StateHasChanged();
            await Task.Delay(500, token);
        }

        if (!_toggleHighlight && !token.IsCancellationRequested)
        {
            _toggleHighlight = true;
            StateHasChanged();
        }
    }

    public void Dispose()
    {
        Game.NodeDrawn -= OnNodeDrawn;
    }

}
