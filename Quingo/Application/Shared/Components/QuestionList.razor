@using Quingo.Application.State

@inject IDialogService Dialog

@implements IDisposable

<MudStack Spacing="1" Row Wrap="Wrap.Wrap">
    @foreach (var node in Nodes)
    {
        <NodeSquare Node="node" CellState="GetCellState(node)" ShowTagBadge 
            ShowTagBadgeTooltip="Game.Preset.ShowTagBadges" OnClick="() => ShowNodeDetails(node)" />
    }
</MudStack>

@code {
    [Parameter, EditorRequired]
    public GameState Game { get; set; } = default!;

    [Parameter]
    public int ItemsToDisplay { get; set; }

    private bool _toggleHighlight = true;

    private IEnumerable<NodeViewModel> Nodes => (ItemsToDisplay > 0 ? Game.DrawnNodes.TakeLast(ItemsToDisplay) : Game.DrawnNodes).Select(x => new NodeViewModel(x));

    private CancellationTokenSource _blinkCancelSrc = new();

    protected override void OnInitialized()
    {
        Game.NodeDrawn += Blink;
    }

    private PlayerCardCellState GetCellState(NodeViewModel node) =>
        node.Id == Game.DrawnNodes.Last().Id && _toggleHighlight ? PlayerCardCellState.Marked : default;

    private async void ShowNodeDetails(NodeViewModel node)
    {
        await NodeDetailsDialog.ShowNodeDetails(Dialog, Game, node);
    }

    private void Blink()
    {
        InvokeAsync(async () =>
        {
            _blinkCancelSrc.Cancel();
            _blinkCancelSrc = new();
            var token = _blinkCancelSrc.Token;

            for (int i = 0; i < 6; i++)
            {
                if (token.IsCancellationRequested) break;

                _toggleHighlight = !_toggleHighlight;
                StateHasChanged();
                await Task.Delay(500, token);
            }

            if (!_toggleHighlight && !token.IsCancellationRequested)
            {
                _toggleHighlight = true;
                StateHasChanged();
            }
        });
    }

    public void Dispose()
    {
        Game.NodeDrawn += Blink;
    }

}
